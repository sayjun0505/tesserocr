/* Generated by Cython 0.23.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "language": "c++", 
        "libraries": [
            "tesseract", 
            "lept"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__tesserocr
#define __PYX_HAVE_API__tesserocr
#include "leptonica/allheaders.h"
#include "tesseract/genericvector.h"
#include "tesseract/strngs.h"
#include "tesseract/baseapi.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "tesserocr.pyx",
};

/* "tesseract.pxd":2
 * from libcpp cimport bool
 * ctypedef const char cchar_t             # <<<<<<<<<<<<<<
 * ctypedef const unsigned char cuchar_t
 * 
 */
typedef char const __pyx_t_9tesseract_cchar_t;

/* "tesseract.pxd":3
 * from libcpp cimport bool
 * ctypedef const char cchar_t
 * ctypedef const unsigned char cuchar_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "leptonica/allheaders.h" nogil:
 */
typedef unsigned char const __pyx_t_9tesseract_cuchar_t;

/*--- Type declarations ---*/
struct __pyx_obj_9tesserocr_PSM;
struct __pyx_obj_9tesserocr_PyTessBaseAPI;

/* "tesserocr.pyx":50
 * 
 * 
 * cdef class PSM:             # <<<<<<<<<<<<<<
 *     """An enum that defines all available page segmentation modes.
 * 
 */
struct __pyx_obj_9tesserocr_PSM {
  PyObject_HEAD
};


/* "tesserocr.pyx":131
 * 
 * 
 * cdef class PyTessBaseAPI:             # <<<<<<<<<<<<<<
 *     """Cython wrapper class around the C++ TessBaseAPI class.
 * 
 */
struct __pyx_obj_9tesserocr_PyTessBaseAPI {
  PyObject_HEAD
  struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *__pyx_vtab;
  tesseract::TessBaseAPI _baseapi;
  struct Pix *_pix;
};



struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI {
  int (*_init_api)(struct __pyx_obj_9tesserocr_PyTessBaseAPI *, __pyx_t_9tesseract_cchar_t *, __pyx_t_9tesseract_cchar_t *, enum tesseract::PageSegMode);
  void (*_end_api)(struct __pyx_obj_9tesserocr_PyTessBaseAPI *);
  void (*_destroy_pix)(struct __pyx_obj_9tesserocr_PyTessBaseAPI *);
};
static struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *__pyx_vtabptr_9tesserocr_PyTessBaseAPI;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(enum tesseract::PageSegMode value);

static CYTHON_INLINE enum tesseract::PageSegMode __Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_9tesserocr_13PyTessBaseAPI__init_api(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm); /* proto*/
static void __pyx_f_9tesserocr_13PyTessBaseAPI__end_api(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto*/
static void __pyx_f_9tesserocr_13PyTessBaseAPI__destroy_pix(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'tesseract' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'tesserocr' */
static PyTypeObject *__pyx_ptype_9tesserocr_PSM = 0;
static PyTypeObject *__pyx_ptype_9tesserocr_PyTessBaseAPI = 0;
static tesseract::TessBaseAPI __pyx_v_9tesserocr__api;
static PyObject *__pyx_v_9tesserocr__abs_path = 0;
static PyObject *__pyx_v_9tesserocr__lang_s = 0;
static __pyx_t_9tesseract_cchar_t *__pyx_v_9tesserocr__DEFAULT_PATH;
static __pyx_t_9tesseract_cchar_t *__pyx_v_9tesserocr__DEFAULT_LANG;
static PyObject *__pyx_f_9tesserocr__strip_and_free(char *); /*proto*/
static PyObject *__pyx_f_9tesserocr__image_buffer(PyObject *); /*proto*/
static char *__pyx_f_9tesserocr__image_to_text(struct Pix *, char const *, enum tesseract::PageSegMode const , char const *); /*proto*/
#define __Pyx_MODULE_NAME "tesserocr"
int __pyx_module_is_main_tesserocr = 0;

/* Implementation of 'tesserocr' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_xrange;
static char __pyx_k_i[] = "i";
static char __pyx_k_v[] = "v";
static char __pyx_k_os[] = "os";
static char __pyx_k_BMP[] = "BMP";
static char __pyx_k_PIL[] = "PIL";
static char __pyx_k_pix[] = "pix";
static char __pyx_k_psm[] = "psm";
static char __pyx_k_raw[] = "raw";
static char __pyx_k_sep[] = "sep";
static char __pyx_k_top[] = "top";
static char __pyx_k_val[] = "val";
static char __pyx_k_AUTO[] = "AUTO";
static char __pyx_k_buff[] = "buff";
static char __pyx_k_exit[] = "__exit__";
static char __pyx_k_join[] = "join";
static char __pyx_k_lang[] = "lang";
static char __pyx_k_left[] = "left";
static char __pyx_k_load[] = "load";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_open[] = "open";
static char __pyx_k_path[] = "path";
static char __pyx_k_save[] = "save";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_text[] = "text";
static char __pyx_k_word[] = "word";
static char __pyx_k_COUNT[] = "COUNT";
static char __pyx_k_Image[] = "Image";
static char __pyx_k_enter[] = "__enter__";
static char __pyx_k_image[] = "image";
static char __pyx_k_langs[] = "langs";
static char __pyx_k_range[] = "range";
static char __pyx_k_strip[] = "strip";
static char __pyx_k_width[] = "width";
static char __pyx_k_exc_tb[] = "exc_tb";
static char __pyx_k_exc_tp[] = "exc_tp";
static char __pyx_k_format[] = "format";
static char __pyx_k_height[] = "height";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_lept_v[] = "lept_v";
static char __pyx_k_libs_v[] = "libs_v";
static char __pyx_k_pardir[] = "pardir";
static char __pyx_k_tess_v[] = "tess_v";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_Version[] = "Version";
static char __pyx_k_abspath[] = "abspath";
static char __pyx_k_baseapi[] = "baseapi";
static char __pyx_k_closing[] = "closing";
static char __pyx_k_exc_val[] = "exc_val";
static char __pyx_k_os_path[] = "os.path";
static char __pyx_k_version[] = "__version__";
static char __pyx_k_1_2_1rc2[] = "1.2.1rc2";
static char __pyx_k_AUTO_OSD[] = "AUTO_OSD";
static char __pyx_k_OSD_ONLY[] = "OSD_ONLY";
static char __pyx_k_RAW_LINE[] = "RAW_LINE";
static char __pyx_k_StringIO[] = "StringIO";
static char __pyx_k_dev_null[] = "/dev/null";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_getvalue[] = "getvalue";
static char __pyx_k_AUTO_ONLY[] = "AUTO_ONLY";
static char __pyx_k_cStringIO[] = "cStringIO";
static char __pyx_k_tesseract[] = "tesseract {}\n {}\n  {}";
static char __pyx_k_tesserocr[] = "tesserocr";
static char __pyx_k_contextlib[] = "contextlib";
static char __pyx_k_debug_file[] = "debug_file";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_CIRCLE_WORD[] = "CIRCLE_WORD";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_SINGLE_CHAR[] = "SINGLE_CHAR";
static char __pyx_k_SINGLE_LINE[] = "SINGLE_LINE";
static char __pyx_k_SINGLE_WORD[] = "SINGLE_WORD";
static char __pyx_k_SPARSE_TEXT[] = "SPARSE_TEXT";
static char __pyx_k_version_str[] = "version_str";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_SINGLE_BLOCK[] = "SINGLE_BLOCK";
static char __pyx_k_file_to_text[] = "file_to_text";
static char __pyx_k_staticmethod[] = "staticmethod";
static char __pyx_k_SINGLE_COLUMN[] = "SINGLE_COLUMN";
static char __pyx_k_get_languages[] = "get_languages";
static char __pyx_k_image_to_text[] = "image_to_text";
static char __pyx_k_SPARSE_TEXT_OSD[] = "SPARSE_TEXT_OSD";
static char __pyx_k_tesseract_version[] = "tesseract_version";
static char __pyx_k_Error_reading_image[] = "Error reading image";
static char __pyx_k_ClearPersistentCache[] = "ClearPersistentCache";
static char __pyx_k_Failed_to_read_picture[] = "Failed to read picture";
static char __pyx_k_SINGLE_BLOCK_VERT_TEXT[] = "SINGLE_BLOCK_VERT_TEXT";
static char __pyx_k_Failed_recognize_picture[] = "Failed recognize picture";
static char __pyx_k_Failed_to_initialize_api[] = "Failed to initialize api";
static char __pyx_k_home_fz_workspace_tesserocr_tes[] = "/home/fz/workspace/tesserocr/tesserocr.pyx";
static char __pyx_k_Failed_to_recognize_No_image_set[] = "Failed to recognize. No image set?";
static char __pyx_k_Python_wrapper_around_the_Tesser[] = "Python wrapper around the Tesseract-OCR 3.02+ C++ API\n\nThis module provides a wrapper class `PyTessBaseAPI` to call\nTesseract API methods. See :class:`~tesserocr.PyTessBaseAPI` for details.\n\nIn addition, helper functions are provided for ocr operations:\n\n    >>> text = image_to_text(Image.open('./image.jpg').convert('L'), lang='eng')\n    >>> text = file_to_text('./image.jpg', psm=PSM.AUTO)\n    >>> print tesseract_version()\n    tesseract 3.04.00\n     leptonica-1.72\n      libjpeg 8d (libjpeg-turbo 1.3.0) : libpng 1.2.51 : libtiff 4.0.3 : zlib 1.2.8\n    >>> get_languages()\n    ('/usr/share/tesseract-ocr/tessdata/',\n     ['eng', 'osd', 'equ'])\n";
static PyObject *__pyx_kp_s_1_2_1rc2;
static PyObject *__pyx_n_s_AUTO;
static PyObject *__pyx_n_s_AUTO_ONLY;
static PyObject *__pyx_n_s_AUTO_OSD;
static PyObject *__pyx_n_s_BMP;
static PyObject *__pyx_n_s_CIRCLE_WORD;
static PyObject *__pyx_n_s_COUNT;
static PyObject *__pyx_n_s_ClearPersistentCache;
static PyObject *__pyx_kp_s_Error_reading_image;
static PyObject *__pyx_kp_s_Failed_recognize_picture;
static PyObject *__pyx_kp_s_Failed_to_initialize_api;
static PyObject *__pyx_kp_s_Failed_to_read_picture;
static PyObject *__pyx_kp_s_Failed_to_recognize_No_image_set;
static PyObject *__pyx_n_s_Image;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_OSD_ONLY;
static PyObject *__pyx_n_s_PIL;
static PyObject *__pyx_n_s_RAW_LINE;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SINGLE_BLOCK;
static PyObject *__pyx_n_s_SINGLE_BLOCK_VERT_TEXT;
static PyObject *__pyx_n_s_SINGLE_CHAR;
static PyObject *__pyx_n_s_SINGLE_COLUMN;
static PyObject *__pyx_n_s_SINGLE_LINE;
static PyObject *__pyx_n_s_SINGLE_WORD;
static PyObject *__pyx_n_s_SPARSE_TEXT;
static PyObject *__pyx_n_s_SPARSE_TEXT_OSD;
static PyObject *__pyx_n_s_StringIO;
static PyObject *__pyx_n_s_Version;
static PyObject *__pyx_n_s_abspath;
static PyObject *__pyx_n_s_baseapi;
static PyObject *__pyx_n_s_buff;
static PyObject *__pyx_n_s_cStringIO;
static PyObject *__pyx_n_s_closing;
static PyObject *__pyx_n_s_contextlib;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_tp;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_file_to_text;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get_languages;
static PyObject *__pyx_n_s_getvalue;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_kp_s_home_fz_workspace_tesserocr_tes;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_image_to_text;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_lang;
static PyObject *__pyx_n_s_langs;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_lept_v;
static PyObject *__pyx_n_s_libs_v;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_os_path;
static PyObject *__pyx_n_s_pardir;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pix;
static PyObject *__pyx_n_s_psm;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_tess_v;
static PyObject *__pyx_kp_u_tesseract;
static PyObject *__pyx_n_s_tesseract_version;
static PyObject *__pyx_n_s_tesserocr;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_top;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_version_str;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_word;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_Version(); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_2ClearPersistentCache(); /* proto */
static int __pyx_pf_9tesserocr_13PyTessBaseAPI_4__cinit__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm); /* proto */
static void __pyx_pf_9tesserocr_13PyTessBaseAPI_6__dealloc__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_8GetDatapath(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_10SetVariable(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, char const *__pyx_v_name, char const *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_12GetVariableAsString(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, char const *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_14Init(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_16GetInitLanguagesAsString(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_18GetLoadedLanguages(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_20GetAvailableLanguages(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_22ReadConfigFile(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, char const *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_24SetPageSegMode(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, enum tesseract::PageSegMode __pyx_v_psm); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_26GetPageSegMode(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_28SetImage(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, PyObject *__pyx_v_image); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_30SetImageFile(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_32SetSourceResolution(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, int __pyx_v_ppi); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_34SetRectangle(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, int __pyx_v_left, int __pyx_v_top, int __pyx_v_width, int __pyx_v_height); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_36GetThresholdedImage(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_38GetThresholdedImageScaleFactor(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_40GetUTF8Text(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_42AllWordConfidences(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_44AdaptToWordStr(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, enum tesseract::PageSegMode __pyx_v_psm, char const *__pyx_v_word); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_46Clear(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_48End(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_50__enter__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_52__exit__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_9tesserocr_image_to_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm, __pyx_t_9tesseract_cchar_t *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_9tesserocr_2file_to_text(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_9tesseract_cchar_t *__pyx_v_filename, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm, __pyx_t_9tesseract_cchar_t *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_9tesserocr_4tesseract_version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9tesserocr_6get_languages(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path); /* proto */
static PyObject *__pyx_tp_new_9tesserocr_PSM(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9tesserocr_PyTessBaseAPI(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __pyx_t_9tesseract_cchar_t *__pyx_k__3;
static __pyx_t_9tesseract_cchar_t *__pyx_k__4;
static enum tesseract::PageSegMode __pyx_k__5;
static __pyx_t_9tesseract_cchar_t *__pyx_k__6;
static __pyx_t_9tesseract_cchar_t *__pyx_k__7;
static enum tesseract::PageSegMode __pyx_k__8;
static __pyx_t_9tesseract_cchar_t *__pyx_k__14;
static enum tesseract::PageSegMode __pyx_k__15;
static __pyx_t_9tesseract_cchar_t *__pyx_k__16;
static __pyx_t_9tesseract_cchar_t *__pyx_k__19;
static enum tesseract::PageSegMode __pyx_k__20;
static __pyx_t_9tesseract_cchar_t *__pyx_k__21;
static __pyx_t_9tesseract_cchar_t *__pyx_k__24;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;

/* "tesserocr.pyx":116
 * 
 * 
 * cdef unicode _strip_and_free(char *text):             # <<<<<<<<<<<<<<
 *     """Return stripped unicode string and free the c pointer"""
 *     try:
 */

static PyObject *__pyx_f_9tesserocr__strip_and_free(char *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_strip_and_free", 0);

  /* "tesserocr.pyx":118
 * cdef unicode _strip_and_free(char *text):
 *     """Return stripped unicode string and free the c pointer"""
 *     try:             # <<<<<<<<<<<<<<
 *         return text.strip()
 *     finally:
 */
  /*try:*/ {

    /* "tesserocr.pyx":119
 *     """Return stripped unicode string and free the c pointer"""
 *     try:
 *         return text.strip()             # <<<<<<<<<<<<<<
 *     finally:
 *         free(text)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyUnicode_FromString(__pyx_v_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L3_return;
  }

  /* "tesserocr.pyx":121
 *         return text.strip()
 *     finally:
 *         free(text)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        free(__pyx_v_text);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;
      free(__pyx_v_text);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "tesserocr.pyx":116
 * 
 * 
 * cdef unicode _strip_and_free(char *text):             # <<<<<<<<<<<<<<
 *     """Return stripped unicode string and free the c pointer"""
 *     try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tesserocr._strip_and_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":124
 * 
 * 
 * cdef str _image_buffer(image):             # <<<<<<<<<<<<<<
 *     """Return raw bytes of a PIL Image"""
 *     with closing(StringIO()) as f:
 */

static PyObject *__pyx_f_9tesserocr__image_buffer(PyObject *__pyx_v_image) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_image_buffer", 0);

  /* "tesserocr.pyx":126
 * cdef str _image_buffer(image):
 *     """Return raw bytes of a PIL Image"""
 *     with closing(StringIO()) as f:             # <<<<<<<<<<<<<<
 *         image.save(f, 'BMP')
 *         return f.getvalue()
 */
  /*with:*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_closing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_StringIO); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_f = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "tesserocr.pyx":127
 *     """Return raw bytes of a PIL Image"""
 *     with closing(StringIO()) as f:
 *         image.save(f, 'BMP')             # <<<<<<<<<<<<<<
 *         return f.getvalue()
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_save); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_10 = 1;
            }
          }
          __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __Pyx_GOTREF(__pyx_t_3);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
          }
          __Pyx_INCREF(__pyx_v_f);
          __Pyx_GIVEREF(__pyx_v_f);
          PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_f);
          __Pyx_INCREF(__pyx_n_s_BMP);
          __Pyx_GIVEREF(__pyx_n_s_BMP);
          PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_n_s_BMP);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "tesserocr.pyx":128
 *     with closing(StringIO()) as f:
 *         image.save(f, 'BMP')
 *         return f.getvalue()             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_getvalue); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          if (__pyx_t_3) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else {
            __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (!(likely(PyString_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __pyx_r = ((PyObject*)__pyx_t_5);
          __pyx_t_5 = 0;
          goto __pyx_L11_try_return;

          /* "tesserocr.pyx":126
 * cdef str _image_buffer(image):
 *     """Return raw bytes of a PIL Image"""
 *     with closing(StringIO()) as f:             # <<<<<<<<<<<<<<
 *         image.save(f, 'BMP')
 *         return f.getvalue()
 */
        }
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("tesserocr._image_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_12 < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __pyx_t_13 = ((!(__pyx_t_12 != 0)) != 0);
          if (__pyx_t_13) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestore(__pyx_t_5, __pyx_t_1, __pyx_t_3);
            __pyx_t_5 = 0; __pyx_t_1 = 0; __pyx_t_3 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L11_try_return:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L4_return;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple_, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L4_return: {
        __pyx_t_14 = __pyx_r;
        __pyx_r = 0;
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__2, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_r = __pyx_t_14;
        __pyx_t_14 = 0;
        goto __pyx_L0;
      }
      __pyx_L6:;
    }
    goto __pyx_L18;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L18:;
  }

  /* "tesserocr.pyx":124
 * 
 * 
 * cdef str _image_buffer(image):             # <<<<<<<<<<<<<<
 *     """Return raw bytes of a PIL Image"""
 *     with closing(StringIO()) as f:
 */

  /* function exit code */
  __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tesserocr._image_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":155
 * 
 *     @staticmethod
 *     def Version():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.Version()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_1Version(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9tesserocr_13PyTessBaseAPI_1Version = {"Version", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_1Version, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_1Version(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Version (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Version", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Version", 0))) return NULL;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_Version();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_Version() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Version", 0);

  /* "tesserocr.pyx":156
 *     @staticmethod
 *     def Version():
 *         return TessBaseAPI.Version()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(tesseract::TessBaseAPI::Version()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":155
 * 
 *     @staticmethod
 *     def Version():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.Version()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.Version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":159
 * 
 *     @staticmethod
 *     def ClearPersistentCache():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_3ClearPersistentCache(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9tesserocr_13PyTessBaseAPI_3ClearPersistentCache = {"ClearPersistentCache", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_3ClearPersistentCache, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_3ClearPersistentCache(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ClearPersistentCache (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("ClearPersistentCache", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "ClearPersistentCache", 0))) return NULL;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_2ClearPersistentCache();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_2ClearPersistentCache() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ClearPersistentCache", 0);

  /* "tesserocr.pyx":160
 *     @staticmethod
 *     def ClearPersistentCache():
 *         return TessBaseAPI.ClearPersistentCache()             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(tesseract::TessBaseAPI::ClearPersistentCache()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":159
 * 
 *     @staticmethod
 *     def ClearPersistentCache():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.ClearPersistentCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":162
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 *     def __cinit__(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH,             # <<<<<<<<<<<<<<
 *                   cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO):
 *         with nogil:
 */

/* Python wrapper */
static int __pyx_pw_9tesserocr_13PyTessBaseAPI_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9tesserocr_13PyTessBaseAPI_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_9tesseract_cchar_t *__pyx_v_path;
  __pyx_t_9tesseract_cchar_t *__pyx_v_lang;
  enum tesseract::PageSegMode __pyx_v_psm;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_lang,&__pyx_n_s_psm,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lang);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_psm);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_path = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_path = __pyx_k__3;
    }
    if (values[1]) {
      __pyx_v_lang = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_lang) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lang = __pyx_k__4;
    }
    if (values[2]) {
      __pyx_v_psm = ((enum tesseract::PageSegMode)__Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_psm = __pyx_k__5;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_4__cinit__(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), __pyx_v_path, __pyx_v_lang, __pyx_v_psm);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9tesserocr_13PyTessBaseAPI_4__cinit__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "tesserocr.pyx":164
 *     def __cinit__(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH,
 *                   cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._pix = NULL
 *             self._init_api(path, lang, psm)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":165
 *                   cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO):
 *         with nogil:
 *             self._pix = NULL             # <<<<<<<<<<<<<<
 *             self._init_api(path, lang, psm)
 * 
 */
        __pyx_v_self->_pix = NULL;

        /* "tesserocr.pyx":166
 *         with nogil:
 *             self._pix = NULL
 *             self._init_api(path, lang, psm)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(PyTessBaseAPI self):
 */
        ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_init_api(__pyx_v_self, __pyx_v_path, __pyx_v_lang, __pyx_v_psm);
      }

      /* "tesserocr.pyx":164
 *     def __cinit__(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH,
 *                   cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._pix = NULL
 *             self._init_api(path, lang, psm)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":162
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 *     def __cinit__(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH,             # <<<<<<<<<<<<<<
 *                   cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO):
 *         with nogil:
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":168
 *             self._init_api(path, lang, psm)
 * 
 *     def __dealloc__(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         self._end_api()
 * 
 */

/* Python wrapper */
static void __pyx_pw_9tesserocr_13PyTessBaseAPI_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9tesserocr_13PyTessBaseAPI_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9tesserocr_13PyTessBaseAPI_6__dealloc__(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9tesserocr_13PyTessBaseAPI_6__dealloc__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "tesserocr.pyx":169
 * 
 *     def __dealloc__(PyTessBaseAPI self):
 *         self._end_api()             # <<<<<<<<<<<<<<
 * 
 *     cdef int _init_api(PyTessBaseAPI self, cchar_t *path, cchar_t *lang,
 */
  ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_end_api(__pyx_v_self);

  /* "tesserocr.pyx":168
 *             self._init_api(path, lang, psm)
 * 
 *     def __dealloc__(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         self._end_api()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "tesserocr.pyx":171
 *         self._end_api()
 * 
 *     cdef int _init_api(PyTessBaseAPI self, cchar_t *path, cchar_t *lang,             # <<<<<<<<<<<<<<
 *                         PageSegMode psm) nogil:
 *         cdef int res
 */

static int __pyx_f_9tesserocr_13PyTessBaseAPI__init_api(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm) {
  int __pyx_v_res;
  int __pyx_r;
  int __pyx_t_1;

  /* "tesserocr.pyx":174
 *                         PageSegMode psm) nogil:
 *         cdef int res
 *         res = self._baseapi.Init(path, lang)             # <<<<<<<<<<<<<<
 *         if res != -1:
 *             self._baseapi.SetPageSegMode(psm)
 */
  __pyx_v_res = __pyx_v_self->_baseapi.Init(__pyx_v_path, __pyx_v_lang);

  /* "tesserocr.pyx":175
 *         cdef int res
 *         res = self._baseapi.Init(path, lang)
 *         if res != -1:             # <<<<<<<<<<<<<<
 *             self._baseapi.SetPageSegMode(psm)
 *         return res
 */
  __pyx_t_1 = ((__pyx_v_res != -1L) != 0);
  if (__pyx_t_1) {

    /* "tesserocr.pyx":176
 *         res = self._baseapi.Init(path, lang)
 *         if res != -1:
 *             self._baseapi.SetPageSegMode(psm)             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
    __pyx_v_self->_baseapi.SetPageSegMode(__pyx_v_psm);

    /* "tesserocr.pyx":175
 *         cdef int res
 *         res = self._baseapi.Init(path, lang)
 *         if res != -1:             # <<<<<<<<<<<<<<
 *             self._baseapi.SetPageSegMode(psm)
 *         return res
 */
  }

  /* "tesserocr.pyx":177
 *         if res != -1:
 *             self._baseapi.SetPageSegMode(psm)
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     cdef void _end_api(PyTessBaseAPI self) nogil:
 */
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "tesserocr.pyx":171
 *         self._end_api()
 * 
 *     cdef int _init_api(PyTessBaseAPI self, cchar_t *path, cchar_t *lang,             # <<<<<<<<<<<<<<
 *                         PageSegMode psm) nogil:
 *         cdef int res
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "tesserocr.pyx":179
 *         return res
 * 
 *     cdef void _end_api(PyTessBaseAPI self) nogil:             # <<<<<<<<<<<<<<
 *         self._destroy_pix()
 *         self._baseapi.End()
 */

static void __pyx_f_9tesserocr_13PyTessBaseAPI__end_api(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {

  /* "tesserocr.pyx":180
 * 
 *     cdef void _end_api(PyTessBaseAPI self) nogil:
 *         self._destroy_pix()             # <<<<<<<<<<<<<<
 *         self._baseapi.End()
 * 
 */
  ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_destroy_pix(__pyx_v_self);

  /* "tesserocr.pyx":181
 *     cdef void _end_api(PyTessBaseAPI self) nogil:
 *         self._destroy_pix()
 *         self._baseapi.End()             # <<<<<<<<<<<<<<
 * 
 *     cdef void _destroy_pix(PyTessBaseAPI self) nogil:
 */
  __pyx_v_self->_baseapi.End();

  /* "tesserocr.pyx":179
 *         return res
 * 
 *     cdef void _end_api(PyTessBaseAPI self) nogil:             # <<<<<<<<<<<<<<
 *         self._destroy_pix()
 *         self._baseapi.End()
 */

  /* function exit code */
}

/* "tesserocr.pyx":183
 *         self._baseapi.End()
 * 
 *     cdef void _destroy_pix(PyTessBaseAPI self) nogil:             # <<<<<<<<<<<<<<
 *         if self._pix != NULL:
 *             pixDestroy(&self._pix)
 */

static void __pyx_f_9tesserocr_13PyTessBaseAPI__destroy_pix(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  int __pyx_t_1;

  /* "tesserocr.pyx":184
 * 
 *     cdef void _destroy_pix(PyTessBaseAPI self) nogil:
 *         if self._pix != NULL:             # <<<<<<<<<<<<<<
 *             pixDestroy(&self._pix)
 *             self._pix = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->_pix != NULL) != 0);
  if (__pyx_t_1) {

    /* "tesserocr.pyx":185
 *     cdef void _destroy_pix(PyTessBaseAPI self) nogil:
 *         if self._pix != NULL:
 *             pixDestroy(&self._pix)             # <<<<<<<<<<<<<<
 *             self._pix = NULL
 * 
 */
    pixDestroy((&__pyx_v_self->_pix));

    /* "tesserocr.pyx":186
 *         if self._pix != NULL:
 *             pixDestroy(&self._pix)
 *             self._pix = NULL             # <<<<<<<<<<<<<<
 * 
 *     def GetDatapath(PyTessBaseAPI self):
 */
    __pyx_v_self->_pix = NULL;

    /* "tesserocr.pyx":184
 * 
 *     cdef void _destroy_pix(PyTessBaseAPI self) nogil:
 *         if self._pix != NULL:             # <<<<<<<<<<<<<<
 *             pixDestroy(&self._pix)
 *             self._pix = NULL
 */
  }

  /* "tesserocr.pyx":183
 *         self._baseapi.End()
 * 
 *     cdef void _destroy_pix(PyTessBaseAPI self) nogil:             # <<<<<<<<<<<<<<
 *         if self._pix != NULL:
 *             pixDestroy(&self._pix)
 */

  /* function exit code */
}

/* "tesserocr.pyx":188
 *             self._pix = NULL
 * 
 *     def GetDatapath(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return tessdata parent directory"""
 *         return self._baseapi.GetDatapath()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_9GetDatapath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_8GetDatapath[] = "Return tessdata parent directory";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_9GetDatapath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetDatapath (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_8GetDatapath(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_8GetDatapath(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetDatapath", 0);

  /* "tesserocr.pyx":190
 *     def GetDatapath(PyTessBaseAPI self):
 *         """Return tessdata parent directory"""
 *         return self._baseapi.GetDatapath()             # <<<<<<<<<<<<<<
 * 
 *     def SetVariable(PyTessBaseAPI self, const char *name, const char *val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_self->_baseapi.GetDatapath()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":188
 *             self._pix = NULL
 * 
 *     def GetDatapath(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return tessdata parent directory"""
 *         return self._baseapi.GetDatapath()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetDatapath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":192
 *         return self._baseapi.GetDatapath()
 * 
 *     def SetVariable(PyTessBaseAPI self, const char *name, const char *val):             # <<<<<<<<<<<<<<
 *         """Set the value of an internal "parameter."
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_11SetVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_10SetVariable[] = "Set the value of an internal \"parameter.\"\n\n        Supply the name of the parameter and the value as a string, just as\n        you would in a config file.\n\n        Eg SetVariable(\"tessedit_char_blacklist\", \"xyz\"); to ignore x, y and z.\n        Or SetVariable(\"classify_bln_numeric_mode\", \"1\"); to set numeric-only mode.\n\n        SetVariable may be used before Init, but settings will revert to\n        defaults on End().\n\n        Args:\n            name (str): parameter name\n            value (str): paramter value\n        Returns:\n            bool: `False` if the name lookup failed.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_11SetVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char const *__pyx_v_name;
  char const *__pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetVariable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_val,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetVariable", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetVariable") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_val) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetVariable", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_10SetVariable(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), __pyx_v_name, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_10SetVariable(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, char const *__pyx_v_name, char const *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetVariable", 0);

  /* "tesserocr.pyx":210
 *             bool: `False` if the name lookup failed.
 *         """
 *         return self._baseapi.SetVariable(name, val)             # <<<<<<<<<<<<<<
 * 
 *     def GetVariableAsString(PyTessBaseAPI self, const char *name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_baseapi.SetVariable(__pyx_v_name, __pyx_v_val)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":192
 *         return self._baseapi.GetDatapath()
 * 
 *     def SetVariable(PyTessBaseAPI self, const char *name, const char *val):             # <<<<<<<<<<<<<<
 *         """Set the value of an internal "parameter."
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":212
 *         return self._baseapi.SetVariable(name, val)
 * 
 *     def GetVariableAsString(PyTessBaseAPI self, const char *name):             # <<<<<<<<<<<<<<
 *         """Return the value of named variable as a string, if it exists."""
 *         cdef STRING val
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_13GetVariableAsString(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_12GetVariableAsString[] = "Return the value of named variable as a string, if it exists.";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_13GetVariableAsString(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char const *__pyx_v_name;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetVariableAsString (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetVariableAsString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_12GetVariableAsString(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), ((char const *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_12GetVariableAsString(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, char const *__pyx_v_name) {
  STRING __pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetVariableAsString", 0);

  /* "tesserocr.pyx":215
 *         """Return the value of named variable as a string, if it exists."""
 *         cdef STRING val
 *         if self._baseapi.GetVariableAsString(name, &val):             # <<<<<<<<<<<<<<
 *             return val.string()
 *         return None
 */
  __pyx_t_1 = (__pyx_v_self->_baseapi.GetVariableAsString(__pyx_v_name, (&__pyx_v_val)) != 0);
  if (__pyx_t_1) {

    /* "tesserocr.pyx":216
 *         cdef STRING val
 *         if self._baseapi.GetVariableAsString(name, &val):
 *             return val.string()             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyUnicode_FromString(__pyx_v_val.string()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "tesserocr.pyx":215
 *         """Return the value of named variable as a string, if it exists."""
 *         cdef STRING val
 *         if self._baseapi.GetVariableAsString(name, &val):             # <<<<<<<<<<<<<<
 *             return val.string()
 *         return None
 */
  }

  /* "tesserocr.pyx":217
 *         if self._baseapi.GetVariableAsString(name, &val):
 *             return val.string()
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def Init(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH, cchar_t *lang=_DEFAULT_LANG,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "tesserocr.pyx":212
 *         return self._baseapi.SetVariable(name, val)
 * 
 *     def GetVariableAsString(PyTessBaseAPI self, const char *name):             # <<<<<<<<<<<<<<
 *         """Return the value of named variable as a string, if it exists."""
 *         cdef STRING val
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetVariableAsString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":219
 *         return None
 * 
 *     def Init(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH, cchar_t *lang=_DEFAULT_LANG,             # <<<<<<<<<<<<<<
 *              PageSegMode psm=PSM_AUTO):
 *         """Initialize the API with the given data path, lang and psm.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_15Init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_14Init[] = "Initialize the API with the given data path, lang and psm.\n\n        It is entirely safe (and eventually will be efficient too) to call\n        `Init` multiple times on the same instance to change language, or just\n        to reset the classifier.\n\n        Args:\n            path (str): The name of the parent directory of tessdata.\n                Must end in /.\n            lang (str): An ISO 639-3 language string. Defaults to 'eng'.\n                The language may be a string of the form [~]<lang>[+[~]<lang>]* indicating\n                that multiple languages are to be loaded. Eg hin+eng will load Hindi and\n                English. Languages may specify internally that they want to be loaded\n                with one or more other languages, so the ~ sign is available to override\n                that. Eg if hin were set to load eng by default, then hin+~eng would force\n                loading only hin. The number of loaded languages is limited only by\n                memory, with the caveat that loading additional languages will impact\n                both speed and accuracy, as there is more work to do to decide on the\n                applicable language, and there is more chance of hallucinating incorrect\n                words.\n            psm (int): Page segmentation mode. Defaults to `PSM.AUTO`.\n                See :class:`tesserocr.PSM` for avaialble psm values.\n        Raises:\n            RuntimeError: If API initialization fails.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_15Init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_9tesseract_cchar_t *__pyx_v_path;
  __pyx_t_9tesseract_cchar_t *__pyx_v_lang;
  enum tesseract::PageSegMode __pyx_v_psm;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_lang,&__pyx_n_s_psm,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lang);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_psm);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_path = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_path = __pyx_k__6;
    }
    if (values[1]) {
      __pyx_v_lang = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_lang) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lang = __pyx_k__7;
    }
    if (values[2]) {
      __pyx_v_psm = ((enum tesseract::PageSegMode)__Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_psm = __pyx_k__8;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Init", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_14Init(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), __pyx_v_path, __pyx_v_lang, __pyx_v_psm);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_14Init(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Init", 0);

  /* "tesserocr.pyx":246
 *             RuntimeError: If API initialization fails.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if self._init_api(path, lang, psm) == -1:
 *                 with gil:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":247
 *         """
 *         with nogil:
 *             if self._init_api(path, lang, psm) == -1:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Failed to initialize api')
 */
        __pyx_t_1 = ((((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_init_api(__pyx_v_self, __pyx_v_path, __pyx_v_lang, __pyx_v_psm) == -1L) != 0);
        if (__pyx_t_1) {

          /* "tesserocr.pyx":248
 *         with nogil:
 *             if self._init_api(path, lang, psm) == -1:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Failed to initialize api')
 * 
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":249
 *             if self._init_api(path, lang, psm) == -1:
 *                 with gil:
 *                     raise RuntimeError('Failed to initialize api')             # <<<<<<<<<<<<<<
 * 
 *     def GetInitLanguagesAsString(PyTessBaseAPI self):
 */
                __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              }

              /* "tesserocr.pyx":248
 *         with nogil:
 *             if self._init_api(path, lang, psm) == -1:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Failed to initialize api')
 * 
 */
              /*finally:*/ {
                __pyx_L8_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":247
 *         """
 *         with nogil:
 *             if self._init_api(path, lang, psm) == -1:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Failed to initialize api')
 */
        }
      }

      /* "tesserocr.pyx":246
 *             RuntimeError: If API initialization fails.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if self._init_api(path, lang, psm) == -1:
 *                 with gil:
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":219
 *         return None
 * 
 *     def Init(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH, cchar_t *lang=_DEFAULT_LANG,             # <<<<<<<<<<<<<<
 *              PageSegMode psm=PSM_AUTO):
 *         """Initialize the API with the given data path, lang and psm.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":251
 *                     raise RuntimeError('Failed to initialize api')
 * 
 *     def GetInitLanguagesAsString(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the languages string used in the last valid initialization.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_17GetInitLanguagesAsString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_16GetInitLanguagesAsString[] = "Return the languages string used in the last valid initialization.\n\n        If the last initialization specified \"deu+hin\" then that will be\n        returned. If hin loaded eng automatically as well, then that will\n        not be included in this list. To find the languages actually\n        loaded use `GetLoadedLanguages`.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_17GetInitLanguagesAsString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetInitLanguagesAsString (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_16GetInitLanguagesAsString(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_16GetInitLanguagesAsString(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetInitLanguagesAsString", 0);

  /* "tesserocr.pyx":259
 *         loaded use `GetLoadedLanguages`.
 *         """
 *         return self._baseapi.GetInitLanguagesAsString()             # <<<<<<<<<<<<<<
 * 
 *     def GetLoadedLanguages(PyTessBaseAPI self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_self->_baseapi.GetInitLanguagesAsString()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":251
 *                     raise RuntimeError('Failed to initialize api')
 * 
 *     def GetInitLanguagesAsString(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the languages string used in the last valid initialization.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetInitLanguagesAsString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":261
 *         return self._baseapi.GetInitLanguagesAsString()
 * 
 *     def GetLoadedLanguages(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the loaded languages as a list of STRINGs.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_19GetLoadedLanguages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_18GetLoadedLanguages[] = "Return the loaded languages as a list of STRINGs.\n\n        Includes all languages loaded by the last Init, including those loaded\n        as dependencies of other loaded languages.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_19GetLoadedLanguages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetLoadedLanguages (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_18GetLoadedLanguages(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_18GetLoadedLanguages(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  GenericVector<STRING>  __pyx_v_langs;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetLoadedLanguages", 0);

  /* "tesserocr.pyx":268
 *         """
 *         cdef GenericVector[STRING] langs
 *         self._baseapi.GetLoadedLanguagesAsVector(&langs)             # <<<<<<<<<<<<<<
 *         return [langs[i].string() for i in xrange(langs.size())]
 * 
 */
  __pyx_v_self->_baseapi.GetLoadedLanguagesAsVector((&__pyx_v_langs));

  /* "tesserocr.pyx":269
 *         cdef GenericVector[STRING] langs
 *         self._baseapi.GetLoadedLanguagesAsVector(&langs)
 *         return [langs[i].string() for i in xrange(langs.size())]             # <<<<<<<<<<<<<<
 * 
 *     def GetAvailableLanguages(PyTessBaseAPI self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_langs.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyUnicode_FromString((__pyx_v_langs[__pyx_v_i]).string()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":261
 *         return self._baseapi.GetInitLanguagesAsString()
 * 
 *     def GetLoadedLanguages(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the loaded languages as a list of STRINGs.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetLoadedLanguages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":271
 *         return [langs[i].string() for i in xrange(langs.size())]
 * 
 *     def GetAvailableLanguages(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return list of available languages in the init data path"""
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_21GetAvailableLanguages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_20GetAvailableLanguages[] = "Return list of available languages in the init data path";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_21GetAvailableLanguages(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetAvailableLanguages (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_20GetAvailableLanguages(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_20GetAvailableLanguages(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  GenericVector<STRING>  __pyx_v_v;
  int __pyx_v_i;
  PyObject *__pyx_v_langs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetAvailableLanguages", 0);

  /* "tesserocr.pyx":276
 *             GenericVector[STRING] v
 *             int i
 *         langs = []             # <<<<<<<<<<<<<<
 *         self._baseapi.GetAvailableLanguagesAsVector(&v)
 *         langs = [v[i].string() for i in xrange(v.size())]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_langs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":277
 *             int i
 *         langs = []
 *         self._baseapi.GetAvailableLanguagesAsVector(&v)             # <<<<<<<<<<<<<<
 *         langs = [v[i].string() for i in xrange(v.size())]
 *         return langs
 */
  __pyx_v_self->_baseapi.GetAvailableLanguagesAsVector((&__pyx_v_v));

  /* "tesserocr.pyx":278
 *         langs = []
 *         self._baseapi.GetAvailableLanguagesAsVector(&v)
 *         langs = [v[i].string() for i in xrange(v.size())]             # <<<<<<<<<<<<<<
 *         return langs
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyUnicode_FromString((__pyx_v_v[__pyx_v_i]).string()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF_SET(__pyx_v_langs, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":279
 *         self._baseapi.GetAvailableLanguagesAsVector(&v)
 *         langs = [v[i].string() for i in xrange(v.size())]
 *         return langs             # <<<<<<<<<<<<<<
 * 
 *     def ReadConfigFile(PyTessBaseAPI self, const char *filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_langs);
  __pyx_r = __pyx_v_langs;
  goto __pyx_L0;

  /* "tesserocr.pyx":271
 *         return [langs[i].string() for i in xrange(langs.size())]
 * 
 *     def GetAvailableLanguages(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return list of available languages in the init data path"""
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetAvailableLanguages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_langs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":281
 *         return langs
 * 
 *     def ReadConfigFile(PyTessBaseAPI self, const char *filename):             # <<<<<<<<<<<<<<
 *         """Read a "config" file containing a set of param, value pairs.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_23ReadConfigFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_22ReadConfigFile[] = "Read a \"config\" file containing a set of param, value pairs.\n\n        Searches the standard places: tessdata/configs, tessdata/tessconfigs.\n\n        Args:\n            filename: config file name. Also accepts relative or absolute path name.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_23ReadConfigFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char const *__pyx_v_filename;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ReadConfigFile (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __Pyx_PyObject_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.ReadConfigFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_22ReadConfigFile(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), ((char const *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_22ReadConfigFile(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, char const *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ReadConfigFile", 0);

  /* "tesserocr.pyx":289
 *             filename: config file name. Also accepts relative or absolute path name.
 *         """
 *         self._baseapi.ReadConfigFile(filename)             # <<<<<<<<<<<<<<
 * 
 *     def SetPageSegMode(PyTessBaseAPI self, PageSegMode psm):
 */
  __pyx_v_self->_baseapi.ReadConfigFile(__pyx_v_filename);

  /* "tesserocr.pyx":281
 *         return langs
 * 
 *     def ReadConfigFile(PyTessBaseAPI self, const char *filename):             # <<<<<<<<<<<<<<
 *         """Read a "config" file containing a set of param, value pairs.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":291
 *         self._baseapi.ReadConfigFile(filename)
 * 
 *     def SetPageSegMode(PyTessBaseAPI self, PageSegMode psm):             # <<<<<<<<<<<<<<
 *         """Set page segmentation mode.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_25SetPageSegMode(PyObject *__pyx_v_self, PyObject *__pyx_arg_psm); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_24SetPageSegMode[] = "Set page segmentation mode.\n\n        Args:\n            psm (int): page segmentation mode.\n                See :class:`~tesserocr.PSM` for all available psm options.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_25SetPageSegMode(PyObject *__pyx_v_self, PyObject *__pyx_arg_psm) {
  enum tesseract::PageSegMode __pyx_v_psm;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetPageSegMode (wrapper)", 0);
  assert(__pyx_arg_psm); {
    __pyx_v_psm = ((enum tesseract::PageSegMode)__Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(__pyx_arg_psm)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetPageSegMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_24SetPageSegMode(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), ((enum tesseract::PageSegMode)__pyx_v_psm));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_24SetPageSegMode(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, enum tesseract::PageSegMode __pyx_v_psm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetPageSegMode", 0);

  /* "tesserocr.pyx":298
 *                 See :class:`~tesserocr.PSM` for all available psm options.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._baseapi.SetPageSegMode(psm)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":299
 *         """
 *         with nogil:
 *             self._baseapi.SetPageSegMode(psm)             # <<<<<<<<<<<<<<
 * 
 *     def GetPageSegMode(PyTessBaseAPI self):
 */
        __pyx_v_self->_baseapi.SetPageSegMode(__pyx_v_psm);
      }

      /* "tesserocr.pyx":298
 *                 See :class:`~tesserocr.PSM` for all available psm options.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._baseapi.SetPageSegMode(psm)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":291
 *         self._baseapi.ReadConfigFile(filename)
 * 
 *     def SetPageSegMode(PyTessBaseAPI self, PageSegMode psm):             # <<<<<<<<<<<<<<
 *         """Set page segmentation mode.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":301
 *             self._baseapi.SetPageSegMode(psm)
 * 
 *     def GetPageSegMode(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the current page segmentation mode."""
 *         return self._baseapi.GetPageSegMode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_27GetPageSegMode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_26GetPageSegMode[] = "Return the current page segmentation mode.";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_27GetPageSegMode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetPageSegMode (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_26GetPageSegMode(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_26GetPageSegMode(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetPageSegMode", 0);

  /* "tesserocr.pyx":303
 *     def GetPageSegMode(PyTessBaseAPI self):
 *         """Return the current page segmentation mode."""
 *         return self._baseapi.GetPageSegMode()             # <<<<<<<<<<<<<<
 * 
 *     def SetImage(PyTessBaseAPI self, image):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(__pyx_v_self->_baseapi.GetPageSegMode()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":301
 *             self._baseapi.SetPageSegMode(psm)
 * 
 *     def GetPageSegMode(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the current page segmentation mode."""
 *         return self._baseapi.GetPageSegMode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetPageSegMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":305
 *         return self._baseapi.GetPageSegMode()
 * 
 *     def SetImage(PyTessBaseAPI self, image):             # <<<<<<<<<<<<<<
 *         """Provide an image for Tesseract to recognize.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_29SetImage(PyObject *__pyx_v_self, PyObject *__pyx_v_image); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_28SetImage[] = "Provide an image for Tesseract to recognize.\n\n        This method can be called multiple times after `Init`.\n\n        Args:\n            image (:class:PIL.Image): Image object.\n        Raises:\n            RuntimeError: If for any reason the api failed\n                to load the given image.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_29SetImage(PyObject *__pyx_v_self, PyObject *__pyx_v_image) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetImage (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_28SetImage(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), ((PyObject *)__pyx_v_image));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_28SetImage(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, PyObject *__pyx_v_image) {
  __pyx_t_9tesseract_cuchar_t *__pyx_v_buff;
  size_t __pyx_v_size;
  PyObject *__pyx_v_raw = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_9tesseract_cuchar_t *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetImage", 0);

  /* "tesserocr.pyx":321
 *             str raw
 * 
 *         raw = _image_buffer(image)             # <<<<<<<<<<<<<<
 *         buff = raw
 *         size = len(raw)
 */
  __pyx_t_1 = __pyx_f_9tesserocr__image_buffer(__pyx_v_image); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_raw = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":322
 * 
 *         raw = _image_buffer(image)
 *         buff = raw             # <<<<<<<<<<<<<<
 *         size = len(raw)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_AsUString(__pyx_v_raw); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_buff = __pyx_t_2;

  /* "tesserocr.pyx":323
 *         raw = _image_buffer(image)
 *         buff = raw
 *         size = len(raw)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_raw); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_3;

  /* "tesserocr.pyx":325
 *         size = len(raw)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._destroy_pix()
 *             self._pix = pixReadMemBmp(buff, size)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":326
 * 
 *         with nogil:
 *             self._destroy_pix()             # <<<<<<<<<<<<<<
 *             self._pix = pixReadMemBmp(buff, size)
 *             if self._pix == NULL:
 */
        ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_destroy_pix(__pyx_v_self);

        /* "tesserocr.pyx":327
 *         with nogil:
 *             self._destroy_pix()
 *             self._pix = pixReadMemBmp(buff, size)             # <<<<<<<<<<<<<<
 *             if self._pix == NULL:
 *                 with gil:
 */
        __pyx_v_self->_pix = pixReadMemBmp(__pyx_v_buff, __pyx_v_size);

        /* "tesserocr.pyx":328
 *             self._destroy_pix()
 *             self._pix = pixReadMemBmp(buff, size)
 *             if self._pix == NULL:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Error reading image')
 */
        __pyx_t_4 = ((__pyx_v_self->_pix == NULL) != 0);
        if (__pyx_t_4) {

          /* "tesserocr.pyx":329
 *             self._pix = pixReadMemBmp(buff, size)
 *             if self._pix == NULL:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Error reading image')
 *             self._baseapi.SetImage(self._pix)
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":330
 *             if self._pix == NULL:
 *                 with gil:
 *                     raise RuntimeError('Error reading image')             # <<<<<<<<<<<<<<
 *             self._baseapi.SetImage(self._pix)
 * 
 */
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_Raise(__pyx_t_1, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              }

              /* "tesserocr.pyx":329
 *             self._pix = pixReadMemBmp(buff, size)
 *             if self._pix == NULL:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Error reading image')
 *             self._baseapi.SetImage(self._pix)
 */
              /*finally:*/ {
                __pyx_L8_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":328
 *             self._destroy_pix()
 *             self._pix = pixReadMemBmp(buff, size)
 *             if self._pix == NULL:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Error reading image')
 */
        }

        /* "tesserocr.pyx":331
 *                 with gil:
 *                     raise RuntimeError('Error reading image')
 *             self._baseapi.SetImage(self._pix)             # <<<<<<<<<<<<<<
 * 
 *     def SetImageFile(PyTessBaseAPI self, cchar_t *filename):
 */
        __pyx_v_self->_baseapi.SetImage(__pyx_v_self->_pix);
      }

      /* "tesserocr.pyx":325
 *         size = len(raw)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._destroy_pix()
 *             self._pix = pixReadMemBmp(buff, size)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":305
 *         return self._baseapi.GetPageSegMode()
 * 
 *     def SetImage(PyTessBaseAPI self, image):             # <<<<<<<<<<<<<<
 *         """Provide an image for Tesseract to recognize.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_raw);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":333
 *             self._baseapi.SetImage(self._pix)
 * 
 *     def SetImageFile(PyTessBaseAPI self, cchar_t *filename):             # <<<<<<<<<<<<<<
 *         """Set image from file for Tesserac to recognize.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_31SetImageFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_30SetImageFile[] = "Set image from file for Tesserac to recognize.\n\n        Args:\n            filename (str): Image file relative or absolute path.\n        Raises:\n            RuntimeError: If for any reason the api failed\n                to load the given image.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_31SetImageFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  __pyx_t_9tesseract_cchar_t *__pyx_v_filename;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetImageFile (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __Pyx_PyObject_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetImageFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_30SetImageFile(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), ((__pyx_t_9tesseract_cchar_t *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_30SetImageFile(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, __pyx_t_9tesseract_cchar_t *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetImageFile", 0);

  /* "tesserocr.pyx":342
 *                 to load the given image.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._destroy_pix()
 *             self._pix = pixRead(filename)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":343
 *         """
 *         with nogil:
 *             self._destroy_pix()             # <<<<<<<<<<<<<<
 *             self._pix = pixRead(filename)
 *             if self._pix == NULL:
 */
        ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_destroy_pix(__pyx_v_self);

        /* "tesserocr.pyx":344
 *         with nogil:
 *             self._destroy_pix()
 *             self._pix = pixRead(filename)             # <<<<<<<<<<<<<<
 *             if self._pix == NULL:
 *                 with gil:
 */
        __pyx_v_self->_pix = pixRead(__pyx_v_filename);

        /* "tesserocr.pyx":345
 *             self._destroy_pix()
 *             self._pix = pixRead(filename)
 *             if self._pix == NULL:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Error reading image')
 */
        __pyx_t_1 = ((__pyx_v_self->_pix == NULL) != 0);
        if (__pyx_t_1) {

          /* "tesserocr.pyx":346
 *             self._pix = pixRead(filename)
 *             if self._pix == NULL:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Error reading image')
 *             self._baseapi.SetImage(self._pix)
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":347
 *             if self._pix == NULL:
 *                 with gil:
 *                     raise RuntimeError('Error reading image')             # <<<<<<<<<<<<<<
 *             self._baseapi.SetImage(self._pix)
 * 
 */
                __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              }

              /* "tesserocr.pyx":346
 *             self._pix = pixRead(filename)
 *             if self._pix == NULL:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Error reading image')
 *             self._baseapi.SetImage(self._pix)
 */
              /*finally:*/ {
                __pyx_L8_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":345
 *             self._destroy_pix()
 *             self._pix = pixRead(filename)
 *             if self._pix == NULL:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Error reading image')
 */
        }

        /* "tesserocr.pyx":348
 *                 with gil:
 *                     raise RuntimeError('Error reading image')
 *             self._baseapi.SetImage(self._pix)             # <<<<<<<<<<<<<<
 * 
 *     def SetSourceResolution(PyTessBaseAPI self, int ppi):
 */
        __pyx_v_self->_baseapi.SetImage(__pyx_v_self->_pix);
      }

      /* "tesserocr.pyx":342
 *                 to load the given image.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._destroy_pix()
 *             self._pix = pixRead(filename)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":333
 *             self._baseapi.SetImage(self._pix)
 * 
 *     def SetImageFile(PyTessBaseAPI self, cchar_t *filename):             # <<<<<<<<<<<<<<
 *         """Set image from file for Tesserac to recognize.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetImageFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":350
 *             self._baseapi.SetImage(self._pix)
 * 
 *     def SetSourceResolution(PyTessBaseAPI self, int ppi):             # <<<<<<<<<<<<<<
 *         """Set the resolution of the source image in pixels per inch so font size
 *         information can be calculated in results.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_33SetSourceResolution(PyObject *__pyx_v_self, PyObject *__pyx_arg_ppi); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_32SetSourceResolution[] = "Set the resolution of the source image in pixels per inch so font size\n        information can be calculated in results.\n\n        Call this after `SetImage`.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_33SetSourceResolution(PyObject *__pyx_v_self, PyObject *__pyx_arg_ppi) {
  int __pyx_v_ppi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetSourceResolution (wrapper)", 0);
  assert(__pyx_arg_ppi); {
    __pyx_v_ppi = __Pyx_PyInt_As_int(__pyx_arg_ppi); if (unlikely((__pyx_v_ppi == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetSourceResolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_32SetSourceResolution(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), ((int)__pyx_v_ppi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_32SetSourceResolution(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, int __pyx_v_ppi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetSourceResolution", 0);

  /* "tesserocr.pyx":356
 *         Call this after `SetImage`.
 *         """
 *         self._baseapi.SetSourceResolution(ppi)             # <<<<<<<<<<<<<<
 * 
 *     def SetRectangle(PyTessBaseAPI self, int left, int top, int width, int height):
 */
  __pyx_v_self->_baseapi.SetSourceResolution(__pyx_v_ppi);

  /* "tesserocr.pyx":350
 *             self._baseapi.SetImage(self._pix)
 * 
 *     def SetSourceResolution(PyTessBaseAPI self, int ppi):             # <<<<<<<<<<<<<<
 *         """Set the resolution of the source image in pixels per inch so font size
 *         information can be calculated in results.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":358
 *         self._baseapi.SetSourceResolution(ppi)
 * 
 *     def SetRectangle(PyTessBaseAPI self, int left, int top, int width, int height):             # <<<<<<<<<<<<<<
 *         """Restrict recognition to a sub-rectangle of the image. Call after `SetImage`.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_35SetRectangle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_34SetRectangle[] = "Restrict recognition to a sub-rectangle of the image. Call after `SetImage`.\n\n        Each SetRectangle clears the recogntion results so multiple rectangles\n        can be recognized with the same image.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_35SetRectangle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_left;
  int __pyx_v_top;
  int __pyx_v_width;
  int __pyx_v_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetRectangle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left,&__pyx_n_s_top,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_top)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetRectangle", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetRectangle", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetRectangle", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetRectangle") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_left = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_left == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_top = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_top == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_width = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_height = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetRectangle", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.SetRectangle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_34SetRectangle(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), __pyx_v_left, __pyx_v_top, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_34SetRectangle(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, int __pyx_v_left, int __pyx_v_top, int __pyx_v_width, int __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetRectangle", 0);

  /* "tesserocr.pyx":364
 *         can be recognized with the same image.
 *         """
 *         self._baseapi.SetRectangle(left, top, width, height)             # <<<<<<<<<<<<<<
 * 
 *     def GetThresholdedImage(PyTessBaseAPI self):
 */
  __pyx_v_self->_baseapi.SetRectangle(__pyx_v_left, __pyx_v_top, __pyx_v_width, __pyx_v_height);

  /* "tesserocr.pyx":358
 *         self._baseapi.SetSourceResolution(ppi)
 * 
 *     def SetRectangle(PyTessBaseAPI self, int left, int top, int width, int height):             # <<<<<<<<<<<<<<
 *         """Restrict recognition to a sub-rectangle of the image. Call after `SetImage`.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":366
 *         self._baseapi.SetRectangle(left, top, width, height)
 * 
 *     def GetThresholdedImage(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return a copy of the internal thresholded image from Tesseract.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_37GetThresholdedImage(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_36GetThresholdedImage[] = "Return a copy of the internal thresholded image from Tesseract.\n\n        May be called any time after SetImage.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_37GetThresholdedImage(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetThresholdedImage (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_36GetThresholdedImage(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_36GetThresholdedImage(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  struct Pix *__pyx_v_pix;
  unsigned char *__pyx_v_buff;
  size_t __pyx_v_size;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_image = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetThresholdedImage", 0);

  /* "tesserocr.pyx":372
 *         """
 *         cdef:
 *             Pix *pix = self._baseapi.GetThresholdedImage()             # <<<<<<<<<<<<<<
 *             unsigned char *buff
 *             size_t size
 */
  __pyx_v_pix = __pyx_v_self->_baseapi.GetThresholdedImage();

  /* "tesserocr.pyx":376
 *             size_t size
 * 
 *         if pix == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_pix == NULL) != 0);
  if (__pyx_t_1) {

    /* "tesserocr.pyx":377
 * 
 *         if pix == NULL:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         pixWriteMemBmp(&buff, &size, pix)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "tesserocr.pyx":376
 *             size_t size
 * 
 *         if pix == NULL:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "tesserocr.pyx":379
 *             return None
 * 
 *         pixWriteMemBmp(&buff, &size, pix)             # <<<<<<<<<<<<<<
 *         pixDestroy(&pix)
 * 
 */
  pixWriteMemBmp((&__pyx_v_buff), (&__pyx_v_size), __pyx_v_pix);

  /* "tesserocr.pyx":380
 * 
 *         pixWriteMemBmp(&buff, &size, pix)
 *         pixDestroy(&pix)             # <<<<<<<<<<<<<<
 * 
 *         with closing(StringIO(<bytes>buff[:size])) as f:
 */
  pixDestroy((&__pyx_v_pix));

  /* "tesserocr.pyx":382
 *         pixDestroy(&pix)
 * 
 *         with closing(StringIO(<bytes>buff[:size])) as f:             # <<<<<<<<<<<<<<
 *             image = Image.open(f)
 *             image.load()
 */
  /*with:*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_closing); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_StringIO); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_buff) + 0, __pyx_v_size - 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(((PyObject*)__pyx_t_6));
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {
          __pyx_v_f = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "tesserocr.pyx":383
 * 
 *         with closing(StringIO(<bytes>buff[:size])) as f:
 *             image = Image.open(f)             # <<<<<<<<<<<<<<
 *             image.load()
 * 
 */
          __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Image); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_open); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (!__pyx_t_2) {
            __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_f); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_8);
          } else {
            __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
            __Pyx_INCREF(__pyx_v_f);
            __Pyx_GIVEREF(__pyx_v_f);
            PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_f);
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_image = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "tesserocr.pyx":384
 *         with closing(StringIO(<bytes>buff[:size])) as f:
 *             image = Image.open(f)
 *             image.load()             # <<<<<<<<<<<<<<
 * 
 *         return image
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_load); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_4) {
            __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else {
            __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          }
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "tesserocr.pyx":382
 *         pixDestroy(&pix)
 * 
 *         with closing(StringIO(<bytes>buff[:size])) as f:             # <<<<<<<<<<<<<<
 *             image = Image.open(f)
 *             image.load()
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetThresholdedImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_3, &__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_8, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__pyx_t_1 < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __pyx_t_14 = ((!(__pyx_t_1 != 0)) != 0);
          if (__pyx_t_14) {
            __Pyx_GIVEREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestore(__pyx_t_8, __pyx_t_3, __pyx_t_4);
            __pyx_t_8 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L15_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_9) {
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__12, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L19;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L1_error;
    __pyx_L19:;
  }

  /* "tesserocr.pyx":386
 *             image.load()
 * 
 *         return image             # <<<<<<<<<<<<<<
 * 
 *     def GetThresholdedImageScaleFactor(PyTessBaseAPI self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_image)) { __Pyx_RaiseUnboundLocalError("image"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __Pyx_INCREF(__pyx_v_image);
  __pyx_r = __pyx_v_image;
  goto __pyx_L0;

  /* "tesserocr.pyx":366
 *         self._baseapi.SetRectangle(left, top, width, height)
 * 
 *     def GetThresholdedImage(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return a copy of the internal thresholded image from Tesseract.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetThresholdedImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_image);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":388
 *         return image
 * 
 *     def GetThresholdedImageScaleFactor(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the scale factor of the thresholded image that would be returned by
 *         GetThresholdedImage().
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_39GetThresholdedImageScaleFactor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_38GetThresholdedImageScaleFactor[] = "Return the scale factor of the thresholded image that would be returned by\n        GetThresholdedImage().\n\n        Returns:\n            int: 0 if no thresholder has been set.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_39GetThresholdedImageScaleFactor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetThresholdedImageScaleFactor (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_38GetThresholdedImageScaleFactor(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_38GetThresholdedImageScaleFactor(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetThresholdedImageScaleFactor", 0);

  /* "tesserocr.pyx":395
 *             int: 0 if no thresholder has been set.
 *         """
 *         return self._baseapi.GetThresholdedImageScaleFactor()             # <<<<<<<<<<<<<<
 * 
 *     def GetUTF8Text(PyTessBaseAPI self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_baseapi.GetThresholdedImageScaleFactor()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":388
 *         return image
 * 
 *     def GetThresholdedImageScaleFactor(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the scale factor of the thresholded image that would be returned by
 *         GetThresholdedImage().
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetThresholdedImageScaleFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":397
 *         return self._baseapi.GetThresholdedImageScaleFactor()
 * 
 *     def GetUTF8Text(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the recognized text coded as UTF-8 from the image."""
 *         cdef char *text
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_41GetUTF8Text(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_40GetUTF8Text[] = "Return the recognized text coded as UTF-8 from the image.";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_41GetUTF8Text(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetUTF8Text (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_40GetUTF8Text(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_40GetUTF8Text(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  char *__pyx_v_text;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetUTF8Text", 0);

  /* "tesserocr.pyx":400
 *         """Return the recognized text coded as UTF-8 from the image."""
 *         cdef char *text
 *         with nogil:             # <<<<<<<<<<<<<<
 *             text = self._baseapi.GetUTF8Text()
 *             self._destroy_pix()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":401
 *         cdef char *text
 *         with nogil:
 *             text = self._baseapi.GetUTF8Text()             # <<<<<<<<<<<<<<
 *             self._destroy_pix()
 *             if text == NULL:
 */
        __pyx_v_text = __pyx_v_self->_baseapi.GetUTF8Text();

        /* "tesserocr.pyx":402
 *         with nogil:
 *             text = self._baseapi.GetUTF8Text()
 *             self._destroy_pix()             # <<<<<<<<<<<<<<
 *             if text == NULL:
 *                 with gil:
 */
        ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_destroy_pix(__pyx_v_self);

        /* "tesserocr.pyx":403
 *             text = self._baseapi.GetUTF8Text()
 *             self._destroy_pix()
 *             if text == NULL:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Failed to recognize. No image set?')
 */
        __pyx_t_1 = ((__pyx_v_text == NULL) != 0);
        if (__pyx_t_1) {

          /* "tesserocr.pyx":404
 *             self._destroy_pix()
 *             if text == NULL:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Failed to recognize. No image set?')
 *         return _strip_and_free(text)
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":405
 *             if text == NULL:
 *                 with gil:
 *                     raise RuntimeError('Failed to recognize. No image set?')             # <<<<<<<<<<<<<<
 *         return _strip_and_free(text)
 * 
 */
                __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              }

              /* "tesserocr.pyx":404
 *             self._destroy_pix()
 *             if text == NULL:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError('Failed to recognize. No image set?')
 *         return _strip_and_free(text)
 */
              /*finally:*/ {
                __pyx_L8_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":403
 *             text = self._baseapi.GetUTF8Text()
 *             self._destroy_pix()
 *             if text == NULL:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     raise RuntimeError('Failed to recognize. No image set?')
 */
        }
      }

      /* "tesserocr.pyx":400
 *         """Return the recognized text coded as UTF-8 from the image."""
 *         cdef char *text
 *         with nogil:             # <<<<<<<<<<<<<<
 *             text = self._baseapi.GetUTF8Text()
 *             self._destroy_pix()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":406
 *                 with gil:
 *                     raise RuntimeError('Failed to recognize. No image set?')
 *         return _strip_and_free(text)             # <<<<<<<<<<<<<<
 * 
 *     def AllWordConfidences(PyTessBaseAPI self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_9tesserocr__strip_and_free(__pyx_v_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":397
 *         return self._baseapi.GetThresholdedImageScaleFactor()
 * 
 *     def GetUTF8Text(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return the recognized text coded as UTF-8 from the image."""
 *         cdef char *text
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.GetUTF8Text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":408
 *         return _strip_and_free(text)
 * 
 *     def AllWordConfidences(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return all word confidences (between 0 and 100) as a list.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_43AllWordConfidences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_42AllWordConfidences[] = "Return all word confidences (between 0 and 100) as a list.\n\n        The number of confidences should correspond to the number of space-\n        delimited words in `GetUTF8Text`.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_43AllWordConfidences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AllWordConfidences (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_42AllWordConfidences(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_42AllWordConfidences(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  int *__pyx_v_confidences;
  int __pyx_v_confidence;
  size_t __pyx_v_i;
  PyObject *__pyx_v_confs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("AllWordConfidences", 0);

  /* "tesserocr.pyx":415
 *         """
 *         cdef:
 *             int *confidences = self._baseapi.AllWordConfidences()             # <<<<<<<<<<<<<<
 *             int confidence
 *             size_t i = 0
 */
  __pyx_v_confidences = __pyx_v_self->_baseapi.AllWordConfidences();

  /* "tesserocr.pyx":417
 *             int *confidences = self._baseapi.AllWordConfidences()
 *             int confidence
 *             size_t i = 0             # <<<<<<<<<<<<<<
 * 
 *         confs = []
 */
  __pyx_v_i = 0;

  /* "tesserocr.pyx":419
 *             size_t i = 0
 * 
 *         confs = []             # <<<<<<<<<<<<<<
 *         while confidences[i] != -1:
 *             confidence = confidences[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_confs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":420
 * 
 *         confs = []
 *         while confidences[i] != -1:             # <<<<<<<<<<<<<<
 *             confidence = confidences[i]
 *             confs.append(confidence)
 */
  while (1) {
    __pyx_t_2 = (((__pyx_v_confidences[__pyx_v_i]) != -1L) != 0);
    if (!__pyx_t_2) break;

    /* "tesserocr.pyx":421
 *         confs = []
 *         while confidences[i] != -1:
 *             confidence = confidences[i]             # <<<<<<<<<<<<<<
 *             confs.append(confidence)
 *             i += 1
 */
    __pyx_v_confidence = (__pyx_v_confidences[__pyx_v_i]);

    /* "tesserocr.pyx":422
 *         while confidences[i] != -1:
 *             confidence = confidences[i]
 *             confs.append(confidence)             # <<<<<<<<<<<<<<
 *             i += 1
 *         free(confidences)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_confidence); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_confs, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "tesserocr.pyx":423
 *             confidence = confidences[i]
 *             confs.append(confidence)
 *             i += 1             # <<<<<<<<<<<<<<
 *         free(confidences)
 *         return confs
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "tesserocr.pyx":424
 *             confs.append(confidence)
 *             i += 1
 *         free(confidences)             # <<<<<<<<<<<<<<
 *         return confs
 * 
 */
  free(__pyx_v_confidences);

  /* "tesserocr.pyx":425
 *             i += 1
 *         free(confidences)
 *         return confs             # <<<<<<<<<<<<<<
 * 
 *     def AdaptToWordStr(PyTessBaseAPI self, PageSegMode psm, const char *word):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_confs);
  __pyx_r = __pyx_v_confs;
  goto __pyx_L0;

  /* "tesserocr.pyx":408
 *         return _strip_and_free(text)
 * 
 *     def AllWordConfidences(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Return all word confidences (between 0 and 100) as a list.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.AllWordConfidences", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_confs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":427
 *         return confs
 * 
 *     def AdaptToWordStr(PyTessBaseAPI self, PageSegMode psm, const char *word):             # <<<<<<<<<<<<<<
 *         """Apply the given word to the adaptive classifier if possible.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_45AdaptToWordStr(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_44AdaptToWordStr[] = "Apply the given word to the adaptive classifier if possible.\n\n        Assumes that `SetImage` / `SetRectangle` have been used to set the image\n        to the given word.\n\n        Args:\n            psm (int): Should be `PSM.SINGLE_WORD` or\n                `PSM.CIRCLE_WORD`, as that will be used to control layout analysis.\n                The currently set PageSegMode is preserved.\n            word (str): The word must be SPACE-DELIMITED UTF-8 - l i k e t h i s , so it can\n                tell the boundaries of the graphemes.\n        Returns:\n            bool: `False` if adaption was not possible for some reason.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_45AdaptToWordStr(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  enum tesseract::PageSegMode __pyx_v_psm;
  char const *__pyx_v_word;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AdaptToWordStr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_psm,&__pyx_n_s_word,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_psm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_word)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("AdaptToWordStr", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "AdaptToWordStr") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_psm = ((enum tesseract::PageSegMode)__Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_word = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_word) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("AdaptToWordStr", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.AdaptToWordStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_44AdaptToWordStr(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), __pyx_v_psm, __pyx_v_word);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_44AdaptToWordStr(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, enum tesseract::PageSegMode __pyx_v_psm, char const *__pyx_v_word) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("AdaptToWordStr", 0);

  /* "tesserocr.pyx":442
 *             bool: `False` if adaption was not possible for some reason.
 *         """
 *         return self._baseapi.AdaptToWordStr(psm, word)             # <<<<<<<<<<<<<<
 * 
 *     def Clear(PyTessBaseAPI self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_baseapi.AdaptToWordStr(__pyx_v_psm, __pyx_v_word)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":427
 *         return confs
 * 
 *     def AdaptToWordStr(PyTessBaseAPI self, PageSegMode psm, const char *word):             # <<<<<<<<<<<<<<
 *         """Apply the given word to the adaptive classifier if possible.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.AdaptToWordStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":444
 *         return self._baseapi.AdaptToWordStr(psm, word)
 * 
 *     def Clear(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Free up recognition results and any stored image data, without actually
 *         freeing any recognition data that would be time-consuming to reload.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_47Clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_46Clear[] = "Free up recognition results and any stored image data, without actually\n        freeing any recognition data that would be time-consuming to reload.\n        ";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_47Clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Clear (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_46Clear(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_46Clear(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Clear", 0);

  /* "tesserocr.pyx":448
 *         freeing any recognition data that would be time-consuming to reload.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._destroy_pix()
 *             self._baseapi.Clear()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":449
 *         """
 *         with nogil:
 *             self._destroy_pix()             # <<<<<<<<<<<<<<
 *             self._baseapi.Clear()
 * 
 */
        ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_destroy_pix(__pyx_v_self);

        /* "tesserocr.pyx":450
 *         with nogil:
 *             self._destroy_pix()
 *             self._baseapi.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def End(PyTessBaseAPI self):
 */
        __pyx_v_self->_baseapi.Clear();
      }

      /* "tesserocr.pyx":448
 *         freeing any recognition data that would be time-consuming to reload.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._destroy_pix()
 *             self._baseapi.Clear()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":444
 *         return self._baseapi.AdaptToWordStr(psm, word)
 * 
 *     def Clear(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Free up recognition results and any stored image data, without actually
 *         freeing any recognition data that would be time-consuming to reload.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":452
 *             self._baseapi.Clear()
 * 
 *     def End(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Close down tesseract and free up all memory."""
 *         with nogil:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_49End(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_13PyTessBaseAPI_48End[] = "Close down tesseract and free up all memory.";
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_49End(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("End (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_48End(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_48End(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("End", 0);

  /* "tesserocr.pyx":454
 *     def End(PyTessBaseAPI self):
 *         """Close down tesseract and free up all memory."""
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._end_api()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":455
 *         """Close down tesseract and free up all memory."""
 *         with nogil:
 *             self._end_api()             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(PyTessBaseAPI self):
 */
        ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_end_api(__pyx_v_self);
      }

      /* "tesserocr.pyx":454
 *     def End(PyTessBaseAPI self):
 *         """Close down tesseract and free up all memory."""
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._end_api()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":452
 *             self._baseapi.Clear()
 * 
 *     def End(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         """Close down tesseract and free up all memory."""
 *         with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":457
 *             self._end_api()
 * 
 *     def __enter__(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_51__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_51__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_50__enter__(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_50__enter__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "tesserocr.pyx":458
 * 
 *     def __enter__(PyTessBaseAPI self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(PyTessBaseAPI self, exc_tp, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "tesserocr.pyx":457
 *             self._end_api()
 * 
 *     def __enter__(PyTessBaseAPI self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":460
 *         return self
 * 
 *     def __exit__(PyTessBaseAPI self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self._end_api()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_53__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9tesserocr_13PyTessBaseAPI_53__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_tp = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_tp,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_tp = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.PyTessBaseAPI.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_13PyTessBaseAPI_52__exit__(((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)__pyx_v_self), __pyx_v_exc_tp, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_13PyTessBaseAPI_52__exit__(struct __pyx_obj_9tesserocr_PyTessBaseAPI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "tesserocr.pyx":461
 * 
 *     def __exit__(PyTessBaseAPI self, exc_tp, exc_val, exc_tb):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._end_api()
 *         return False
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":462
 *     def __exit__(PyTessBaseAPI self, exc_tp, exc_val, exc_tb):
 *         with nogil:
 *             self._end_api()             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        ((struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI *)__pyx_v_self->__pyx_vtab)->_end_api(__pyx_v_self);
      }

      /* "tesserocr.pyx":461
 * 
 *     def __exit__(PyTessBaseAPI self, exc_tp, exc_val, exc_tb):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._end_api()
 *         return False
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":463
 *         with nogil:
 *             self._end_api()
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "tesserocr.pyx":460
 *         return self
 * 
 *     def __exit__(PyTessBaseAPI self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self._end_api()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":466
 * 
 * 
 * cdef char *_image_to_text(Pix *pix, const char *lang, const PageSegMode pagesegmode,             # <<<<<<<<<<<<<<
 *                           const char *path) nogil:
 *     cdef:
 */

static char *__pyx_f_9tesserocr__image_to_text(struct Pix *__pyx_v_pix, char const *__pyx_v_lang, enum tesseract::PageSegMode const __pyx_v_pagesegmode, char const *__pyx_v_path) {
  tesseract::TessBaseAPI __pyx_v_baseapi;
  char *__pyx_v_text;
  char *__pyx_r;
  int __pyx_t_1;

  /* "tesserocr.pyx":472
 *         char *text
 * 
 *     if baseapi.Init(path, lang) == -1:             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
  __pyx_t_1 = ((__pyx_v_baseapi.Init(__pyx_v_path, __pyx_v_lang) == -1L) != 0);
  if (__pyx_t_1) {

    /* "tesserocr.pyx":473
 * 
 *     if baseapi.Init(path, lang) == -1:
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 *     baseapi.SetPageSegMode(pagesegmode)
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "tesserocr.pyx":472
 *         char *text
 * 
 *     if baseapi.Init(path, lang) == -1:             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
  }

  /* "tesserocr.pyx":475
 *         return NULL
 * 
 *     baseapi.SetPageSegMode(pagesegmode)             # <<<<<<<<<<<<<<
 *     baseapi.SetImage(pix)
 *     text = baseapi.GetUTF8Text()
 */
  __pyx_v_baseapi.SetPageSegMode(__pyx_v_pagesegmode);

  /* "tesserocr.pyx":476
 * 
 *     baseapi.SetPageSegMode(pagesegmode)
 *     baseapi.SetImage(pix)             # <<<<<<<<<<<<<<
 *     text = baseapi.GetUTF8Text()
 *     pixDestroy(&pix)
 */
  __pyx_v_baseapi.SetImage(__pyx_v_pix);

  /* "tesserocr.pyx":477
 *     baseapi.SetPageSegMode(pagesegmode)
 *     baseapi.SetImage(pix)
 *     text = baseapi.GetUTF8Text()             # <<<<<<<<<<<<<<
 *     pixDestroy(&pix)
 *     baseapi.End()
 */
  __pyx_v_text = __pyx_v_baseapi.GetUTF8Text();

  /* "tesserocr.pyx":478
 *     baseapi.SetImage(pix)
 *     text = baseapi.GetUTF8Text()
 *     pixDestroy(&pix)             # <<<<<<<<<<<<<<
 *     baseapi.End()
 * 
 */
  pixDestroy((&__pyx_v_pix));

  /* "tesserocr.pyx":479
 *     text = baseapi.GetUTF8Text()
 *     pixDestroy(&pix)
 *     baseapi.End()             # <<<<<<<<<<<<<<
 * 
 *     return text
 */
  __pyx_v_baseapi.End();

  /* "tesserocr.pyx":481
 *     baseapi.End()
 * 
 *     return text             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_text;
  goto __pyx_L0;

  /* "tesserocr.pyx":466
 * 
 * 
 * cdef char *_image_to_text(Pix *pix, const char *lang, const PageSegMode pagesegmode,             # <<<<<<<<<<<<<<
 *                           const char *path) nogil:
 *     cdef:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "tesserocr.pyx":484
 * 
 * 
 * def image_to_text(image, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                    cchar_t *path=_DEFAULT_PATH):
 *     """Recognize OCR text from an image object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_1image_to_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9tesserocr_image_to_text[] = "Recognize OCR text from an image object.\n\n    Args:\n        image (:class:`PIL.Image`): image to be processed.\n    Kwargs:\n        lang (str): An ISO 639-3 language string. Defaults to 'eng'.\n        psm (int): Page segmentation mode. Defaults to `PSM.AUTO`.\n            See :class:`~tesserocr.PSM` for all available psm options.\n        path (str): The name of the parent directory of tessdata.\n            Must end in /.\n    Returns:\n        unicode: The text extracted from the image.\n    Raises:\n        RuntimeError: When image fails to be loaded or recognition fails.\n    ";
static PyMethodDef __pyx_mdef_9tesserocr_1image_to_text = {"image_to_text", (PyCFunction)__pyx_pw_9tesserocr_1image_to_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9tesserocr_image_to_text};
static PyObject *__pyx_pw_9tesserocr_1image_to_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_image = 0;
  __pyx_t_9tesseract_cchar_t *__pyx_v_lang;
  enum tesseract::PageSegMode __pyx_v_psm;
  __pyx_t_9tesseract_cchar_t *__pyx_v_path;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("image_to_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_image,&__pyx_n_s_lang,&__pyx_n_s_psm,&__pyx_n_s_path,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_image)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lang);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_psm);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "image_to_text") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_image = values[0];
    if (values[1]) {
      __pyx_v_lang = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_lang) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lang = __pyx_k__14;
    }
    if (values[2]) {
      __pyx_v_psm = ((enum tesseract::PageSegMode)__Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_psm = __pyx_k__15;
    }
    if (values[3]) {
      __pyx_v_path = __Pyx_PyObject_AsString(values[3]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_path = __pyx_k__16;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("image_to_text", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.image_to_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_image_to_text(__pyx_self, __pyx_v_image, __pyx_v_lang, __pyx_v_psm, __pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_image_to_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm, __pyx_t_9tesseract_cchar_t *__pyx_v_path) {
  struct Pix *__pyx_v_pix;
  __pyx_t_9tesseract_cuchar_t *__pyx_v_buff;
  size_t __pyx_v_size;
  char *__pyx_v_text;
  PyObject *__pyx_v_raw = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_9tesseract_cuchar_t *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("image_to_text", 0);

  /* "tesserocr.pyx":508
 *         str raw
 * 
 *     raw = _image_buffer(image)             # <<<<<<<<<<<<<<
 *     buff = raw
 *     size = len(raw)
 */
  __pyx_t_1 = __pyx_f_9tesserocr__image_buffer(__pyx_v_image); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_raw = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":509
 * 
 *     raw = _image_buffer(image)
 *     buff = raw             # <<<<<<<<<<<<<<
 *     size = len(raw)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_AsUString(__pyx_v_raw); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_buff = __pyx_t_2;

  /* "tesserocr.pyx":510
 *     raw = _image_buffer(image)
 *     buff = raw
 *     size = len(raw)             # <<<<<<<<<<<<<<
 * 
 *     with nogil:
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_raw); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_t_3;

  /* "tesserocr.pyx":512
 *     size = len(raw)
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         pix = pixReadMemBmp(buff, size)
 *         if pix == NULL:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":513
 * 
 *     with nogil:
 *         pix = pixReadMemBmp(buff, size)             # <<<<<<<<<<<<<<
 *         if pix == NULL:
 *             with gil:
 */
        __pyx_v_pix = pixReadMemBmp(__pyx_v_buff, __pyx_v_size);

        /* "tesserocr.pyx":514
 *     with nogil:
 *         pix = pixReadMemBmp(buff, size)
 *         if pix == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')
 */
        __pyx_t_4 = ((__pyx_v_pix == NULL) != 0);
        if (__pyx_t_4) {

          /* "tesserocr.pyx":515
 *         pix = pixReadMemBmp(buff, size)
 *         if pix == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":516
 *         if pix == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')             # <<<<<<<<<<<<<<
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 */
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_Raise(__pyx_t_1, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              }

              /* "tesserocr.pyx":515
 *         pix = pixReadMemBmp(buff, size)
 *         if pix == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 */
              /*finally:*/ {
                __pyx_L8_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":514
 *     with nogil:
 *         pix = pixReadMemBmp(buff, size)
 *         if pix == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')
 */
        }

        /* "tesserocr.pyx":517
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)             # <<<<<<<<<<<<<<
 *         if text == NULL:
 *             with gil:
 */
        __pyx_v_text = __pyx_f_9tesserocr__image_to_text(__pyx_v_pix, __pyx_v_lang, __pyx_v_psm, __pyx_v_path);

        /* "tesserocr.pyx":518
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')
 */
        __pyx_t_4 = ((__pyx_v_text == NULL) != 0);
        if (__pyx_t_4) {

          /* "tesserocr.pyx":519
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed recognize picture')
 * 
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":520
 *         if text == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')             # <<<<<<<<<<<<<<
 * 
 *     return _strip_and_free(text)
 */
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_Raise(__pyx_t_1, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              }

              /* "tesserocr.pyx":519
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed recognize picture')
 * 
 */
              /*finally:*/ {
                __pyx_L12_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":518
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')
 */
        }
      }

      /* "tesserocr.pyx":512
 *     size = len(raw)
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         pix = pixReadMemBmp(buff, size)
 *         if pix == NULL:
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":522
 *                 raise RuntimeError('Failed recognize picture')
 * 
 *     return _strip_and_free(text)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9tesserocr__strip_and_free(__pyx_v_text); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":484
 * 
 * 
 * def image_to_text(image, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                    cchar_t *path=_DEFAULT_PATH):
 *     """Recognize OCR text from an image object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tesserocr.image_to_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_raw);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":525
 * 
 * 
 * def file_to_text(cchar_t *filename, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                  cchar_t *path=_DEFAULT_PATH):
 *     """Extract OCR text from an image file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_3file_to_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9tesserocr_2file_to_text[] = "Extract OCR text from an image file.\n\n    Args:\n        filename (str): Image file relative or absolute path.\n    Kwargs:\n        lang (str): An ISO 639-3 language string. Defaults to 'eng'\n        psm (int): Page segmentation mode. Defaults to `PSM.AUTO`\n            See :class:`~tesserocr.PSM` for all available psm options.\n        path (str): The name of the parent directory of tessdata.\n            Must end in /.\n    Returns:\n        unicode: The text extracted from the image.\n    Raises:\n        RuntimeError: When image fails to be loaded or recognition fails.\n    ";
static PyMethodDef __pyx_mdef_9tesserocr_3file_to_text = {"file_to_text", (PyCFunction)__pyx_pw_9tesserocr_3file_to_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9tesserocr_2file_to_text};
static PyObject *__pyx_pw_9tesserocr_3file_to_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_9tesseract_cchar_t *__pyx_v_filename;
  __pyx_t_9tesseract_cchar_t *__pyx_v_lang;
  enum tesseract::PageSegMode __pyx_v_psm;
  __pyx_t_9tesseract_cchar_t *__pyx_v_path;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("file_to_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_lang,&__pyx_n_s_psm,&__pyx_n_s_path,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lang);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_psm);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "file_to_text") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_lang = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_lang) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lang = __pyx_k__19;
    }
    if (values[2]) {
      __pyx_v_psm = ((enum tesseract::PageSegMode)__Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_psm = __pyx_k__20;
    }
    if (values[3]) {
      __pyx_v_path = __Pyx_PyObject_AsString(values[3]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_path = __pyx_k__21;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("file_to_text", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.file_to_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_2file_to_text(__pyx_self, __pyx_v_filename, __pyx_v_lang, __pyx_v_psm, __pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_2file_to_text(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_9tesseract_cchar_t *__pyx_v_filename, __pyx_t_9tesseract_cchar_t *__pyx_v_lang, enum tesseract::PageSegMode __pyx_v_psm, __pyx_t_9tesseract_cchar_t *__pyx_v_path) {
  struct Pix *__pyx_v_pix;
  char *__pyx_v_text;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("file_to_text", 0);

  /* "tesserocr.pyx":546
 *         char *text
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         pix = pixRead(filename)
 *         if pix == NULL:
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "tesserocr.pyx":547
 * 
 *     with nogil:
 *         pix = pixRead(filename)             # <<<<<<<<<<<<<<
 *         if pix == NULL:
 *             with gil:
 */
        __pyx_v_pix = pixRead(__pyx_v_filename);

        /* "tesserocr.pyx":548
 *     with nogil:
 *         pix = pixRead(filename)
 *         if pix == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')
 */
        __pyx_t_1 = ((__pyx_v_pix == NULL) != 0);
        if (__pyx_t_1) {

          /* "tesserocr.pyx":549
 *         pix = pixRead(filename)
 *         if pix == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":550
 *         if pix == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')             # <<<<<<<<<<<<<<
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 */
                __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              }

              /* "tesserocr.pyx":549
 *         pix = pixRead(filename)
 *         if pix == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 */
              /*finally:*/ {
                __pyx_L8_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":548
 *     with nogil:
 *         pix = pixRead(filename)
 *         if pix == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')
 */
        }

        /* "tesserocr.pyx":551
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)             # <<<<<<<<<<<<<<
 *         if text == NULL:
 *             with gil:
 */
        __pyx_v_text = __pyx_f_9tesserocr__image_to_text(__pyx_v_pix, __pyx_v_lang, __pyx_v_psm, __pyx_v_path);

        /* "tesserocr.pyx":552
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')
 */
        __pyx_t_1 = ((__pyx_v_text == NULL) != 0);
        if (__pyx_t_1) {

          /* "tesserocr.pyx":553
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed recognize picture')
 * 
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "tesserocr.pyx":554
 *         if text == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')             # <<<<<<<<<<<<<<
 * 
 *     return _strip_and_free(text)
 */
                __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              }

              /* "tesserocr.pyx":553
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError('Failed recognize picture')
 * 
 */
              /*finally:*/ {
                __pyx_L12_error: {
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }

          /* "tesserocr.pyx":552
 *                 raise RuntimeError('Failed to read picture')
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')
 */
        }
      }

      /* "tesserocr.pyx":546
 *         char *text
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         pix = pixRead(filename)
 *         if pix == NULL:
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "tesserocr.pyx":556
 *                 raise RuntimeError('Failed recognize picture')
 * 
 *     return _strip_and_free(text)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_9tesserocr__strip_and_free(__pyx_v_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":525
 * 
 * 
 * def file_to_text(cchar_t *filename, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                  cchar_t *path=_DEFAULT_PATH):
 *     """Extract OCR text from an image file.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tesserocr.file_to_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":559
 * 
 * 
 * def tesseract_version():             # <<<<<<<<<<<<<<
 *     """Return tesseract-ocr and leptonica version info"""
 *     version_str = u"tesseract {}\n {}\n  {}"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_5tesseract_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9tesserocr_4tesseract_version[] = "Return tesseract-ocr and leptonica version info";
static PyMethodDef __pyx_mdef_9tesserocr_5tesseract_version = {"tesseract_version", (PyCFunction)__pyx_pw_9tesserocr_5tesseract_version, METH_NOARGS, __pyx_doc_9tesserocr_4tesseract_version};
static PyObject *__pyx_pw_9tesserocr_5tesseract_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tesseract_version (wrapper)", 0);
  __pyx_r = __pyx_pf_9tesserocr_4tesseract_version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_4tesseract_version(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_version_str = NULL;
  __pyx_t_9tesseract_cchar_t *__pyx_v_tess_v;
  PyObject *__pyx_v_lept_v = NULL;
  PyObject *__pyx_v_libs_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tesseract_version", 0);

  /* "tesserocr.pyx":561
 * def tesseract_version():
 *     """Return tesseract-ocr and leptonica version info"""
 *     version_str = u"tesseract {}\n {}\n  {}"             # <<<<<<<<<<<<<<
 *     tess_v = TessBaseAPI.Version()
 *     lept_v = _strip_and_free(getLeptonicaVersion())
 */
  __Pyx_INCREF(__pyx_kp_u_tesseract);
  __pyx_v_version_str = __pyx_kp_u_tesseract;

  /* "tesserocr.pyx":562
 *     """Return tesseract-ocr and leptonica version info"""
 *     version_str = u"tesseract {}\n {}\n  {}"
 *     tess_v = TessBaseAPI.Version()             # <<<<<<<<<<<<<<
 *     lept_v = _strip_and_free(getLeptonicaVersion())
 *     libs_v = _strip_and_free(getImagelibVersions())
 */
  __pyx_v_tess_v = tesseract::TessBaseAPI::Version();

  /* "tesserocr.pyx":563
 *     version_str = u"tesseract {}\n {}\n  {}"
 *     tess_v = TessBaseAPI.Version()
 *     lept_v = _strip_and_free(getLeptonicaVersion())             # <<<<<<<<<<<<<<
 *     libs_v = _strip_and_free(getImagelibVersions())
 *     return version_str.format(tess_v, lept_v, libs_v)
 */
  __pyx_t_1 = __pyx_f_9tesserocr__strip_and_free(getLeptonicaVersion()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lept_v = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":564
 *     tess_v = TessBaseAPI.Version()
 *     lept_v = _strip_and_free(getLeptonicaVersion())
 *     libs_v = _strip_and_free(getImagelibVersions())             # <<<<<<<<<<<<<<
 *     return version_str.format(tess_v, lept_v, libs_v)
 * 
 */
  __pyx_t_1 = __pyx_f_9tesserocr__strip_and_free(getImagelibVersions()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_libs_v = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":565
 *     lept_v = _strip_and_free(getLeptonicaVersion())
 *     libs_v = _strip_and_free(getImagelibVersions())
 *     return version_str.format(tess_v, lept_v, libs_v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_version_str, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_tess_v); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_lept_v);
  __Pyx_GIVEREF(__pyx_v_lept_v);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_lept_v);
  __Pyx_INCREF(__pyx_v_libs_v);
  __Pyx_GIVEREF(__pyx_v_libs_v);
  PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_libs_v);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":559
 * 
 * 
 * def tesseract_version():             # <<<<<<<<<<<<<<
 *     """Return tesseract-ocr and leptonica version info"""
 *     version_str = u"tesseract {}\n {}\n  {}"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tesserocr.tesseract_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_version_str);
  __Pyx_XDECREF(__pyx_v_lept_v);
  __Pyx_XDECREF(__pyx_v_libs_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tesserocr.pyx":568
 * 
 * 
 * def get_languages(cchar_t *path=_DEFAULT_PATH):             # <<<<<<<<<<<<<<
 *     """Return available languages in the given path.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9tesserocr_7get_languages(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9tesserocr_6get_languages[] = "Return available languages in the given path.\n\n    Args:\n        path (str): The name of the parent directory of tessdata.\n            Must end in /. Default tesseract-ocr datapath is used\n            if no path is provided.\n    Retruns\n        tuple: Tuple with two elements:\n            - path (str): tessdata parent directory path\n            - languages (list): list of available languages as ISO 639-3 strings.\n    ";
static PyMethodDef __pyx_mdef_9tesserocr_7get_languages = {"get_languages", (PyCFunction)__pyx_pw_9tesserocr_7get_languages, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9tesserocr_6get_languages};
static PyObject *__pyx_pw_9tesserocr_7get_languages(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_9tesseract_cchar_t *__pyx_v_path;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_languages (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_languages") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_path = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_path = __pyx_k__24;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_languages", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tesserocr.get_languages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9tesserocr_6get_languages(__pyx_self, __pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9tesserocr_6get_languages(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_9tesseract_cchar_t *__pyx_v_path) {
  tesseract::TessBaseAPI __pyx_v_baseapi;
  GenericVector<STRING>  __pyx_v_v;
  int __pyx_v_i;
  PyObject *__pyx_v_langs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_languages", 0);

  /* "tesserocr.pyx":584
 *         GenericVector[STRING] v
 *         int i
 *     baseapi.Init(path, NULL)             # <<<<<<<<<<<<<<
 *     path = baseapi.GetDatapath()
 *     baseapi.GetAvailableLanguagesAsVector(&v)
 */
  __pyx_v_baseapi.Init(__pyx_v_path, NULL);

  /* "tesserocr.pyx":585
 *         int i
 *     baseapi.Init(path, NULL)
 *     path = baseapi.GetDatapath()             # <<<<<<<<<<<<<<
 *     baseapi.GetAvailableLanguagesAsVector(&v)
 *     langs = [v[i].string() for i in xrange(v.size())]
 */
  __pyx_v_path = __pyx_v_baseapi.GetDatapath();

  /* "tesserocr.pyx":586
 *     baseapi.Init(path, NULL)
 *     path = baseapi.GetDatapath()
 *     baseapi.GetAvailableLanguagesAsVector(&v)             # <<<<<<<<<<<<<<
 *     langs = [v[i].string() for i in xrange(v.size())]
 *     baseapi.End()
 */
  __pyx_v_baseapi.GetAvailableLanguagesAsVector((&__pyx_v_v));

  /* "tesserocr.pyx":587
 *     path = baseapi.GetDatapath()
 *     baseapi.GetAvailableLanguagesAsVector(&v)
 *     langs = [v[i].string() for i in xrange(v.size())]             # <<<<<<<<<<<<<<
 *     baseapi.End()
 *     return path, langs
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyUnicode_FromString((__pyx_v_v[__pyx_v_i]).string()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_langs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tesserocr.pyx":588
 *     baseapi.GetAvailableLanguagesAsVector(&v)
 *     langs = [v[i].string() for i in xrange(v.size())]
 *     baseapi.End()             # <<<<<<<<<<<<<<
 *     return path, langs
 */
  __pyx_v_baseapi.End();

  /* "tesserocr.pyx":589
 *     langs = [v[i].string() for i in xrange(v.size())]
 *     baseapi.End()
 *     return path, langs             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_langs);
  __Pyx_GIVEREF(__pyx_v_langs);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_langs);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "tesserocr.pyx":568
 * 
 * 
 * def get_languages(cchar_t *path=_DEFAULT_PATH):             # <<<<<<<<<<<<<<
 *     """Return available languages in the given path.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tesserocr.get_languages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_langs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9tesserocr_PSM(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9tesserocr_PSM(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_9tesserocr_PSM = {
  PyVarObject_HEAD_INIT(0, 0)
  "tesserocr.PSM", /*tp_name*/
  sizeof(struct __pyx_obj_9tesserocr_PSM), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9tesserocr_PSM, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An enum that defines all available page segmentation modes.\n\n    `OSD_ONLY`: Orientation and script detection only.\n    `AUTO_OSD`: Automatic page segmentation with orientation and script detection. (OSD)\n    `AUTO_ONLY`: Automatic page segmentation, but no OSD, or OCR.\n    `AUTO`: Fully automatic page segmentation, but no OSD. (:mod:`tesserocr` default)\n    `SINGLE_COLUMN`: Assume a single column of text of variable sizes.\n    `SINGLE_BLOCK_VERT_TEXT`: Assume a single uniform block of vertically aligned text.\n    `SINGLE_BLOCK`: Assume a single uniform block of text.\n    `SINGLE_LINE`: Treat the image as a single text line.\n    `SINGLE_WORD`: Treat the image as a single word.\n    `CIRCLE_WORD`: Treat the image as a single word in a circle.\n    `SINGLE_CHAR`: Treat the image as a single character.\n    `SPARSE_TEXT`: Find as much text as possible in no particular order.\n    `SPARSE_TEXT_OSD`: Sparse text with orientation and script det.\n    `RAW_LINE`: Treat the image as a single text line, bypassing hacks that are Tesseract-specific.\n    `COUNT`: Number of enum entries.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9tesserocr_PSM, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9tesserocr_PyTessBaseAPI __pyx_vtable_9tesserocr_PyTessBaseAPI;

static PyObject *__pyx_tp_new_9tesserocr_PyTessBaseAPI(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9tesserocr_PyTessBaseAPI *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9tesserocr_PyTessBaseAPI *)o);
  p->__pyx_vtab = __pyx_vtabptr_9tesserocr_PyTessBaseAPI;
  new((void*)&(p->_baseapi)) tesseract::TessBaseAPI();
  if (unlikely(__pyx_pw_9tesserocr_13PyTessBaseAPI_5__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9tesserocr_PyTessBaseAPI(PyObject *o) {
  struct __pyx_obj_9tesserocr_PyTessBaseAPI *p = (struct __pyx_obj_9tesserocr_PyTessBaseAPI *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_9tesserocr_13PyTessBaseAPI_7__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->_baseapi);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9tesserocr_PyTessBaseAPI[] = {
  {"Version", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_1Version, METH_VARARGS|METH_KEYWORDS, 0},
  {"ClearPersistentCache", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_3ClearPersistentCache, METH_VARARGS|METH_KEYWORDS, 0},
  {"GetDatapath", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_9GetDatapath, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_8GetDatapath},
  {"SetVariable", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_11SetVariable, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9tesserocr_13PyTessBaseAPI_10SetVariable},
  {"GetVariableAsString", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_13GetVariableAsString, METH_O, __pyx_doc_9tesserocr_13PyTessBaseAPI_12GetVariableAsString},
  {"Init", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_15Init, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9tesserocr_13PyTessBaseAPI_14Init},
  {"GetInitLanguagesAsString", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_17GetInitLanguagesAsString, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_16GetInitLanguagesAsString},
  {"GetLoadedLanguages", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_19GetLoadedLanguages, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_18GetLoadedLanguages},
  {"GetAvailableLanguages", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_21GetAvailableLanguages, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_20GetAvailableLanguages},
  {"ReadConfigFile", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_23ReadConfigFile, METH_O, __pyx_doc_9tesserocr_13PyTessBaseAPI_22ReadConfigFile},
  {"SetPageSegMode", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_25SetPageSegMode, METH_O, __pyx_doc_9tesserocr_13PyTessBaseAPI_24SetPageSegMode},
  {"GetPageSegMode", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_27GetPageSegMode, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_26GetPageSegMode},
  {"SetImage", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_29SetImage, METH_O, __pyx_doc_9tesserocr_13PyTessBaseAPI_28SetImage},
  {"SetImageFile", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_31SetImageFile, METH_O, __pyx_doc_9tesserocr_13PyTessBaseAPI_30SetImageFile},
  {"SetSourceResolution", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_33SetSourceResolution, METH_O, __pyx_doc_9tesserocr_13PyTessBaseAPI_32SetSourceResolution},
  {"SetRectangle", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_35SetRectangle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9tesserocr_13PyTessBaseAPI_34SetRectangle},
  {"GetThresholdedImage", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_37GetThresholdedImage, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_36GetThresholdedImage},
  {"GetThresholdedImageScaleFactor", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_39GetThresholdedImageScaleFactor, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_38GetThresholdedImageScaleFactor},
  {"GetUTF8Text", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_41GetUTF8Text, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_40GetUTF8Text},
  {"AllWordConfidences", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_43AllWordConfidences, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_42AllWordConfidences},
  {"AdaptToWordStr", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_45AdaptToWordStr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9tesserocr_13PyTessBaseAPI_44AdaptToWordStr},
  {"Clear", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_47Clear, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_46Clear},
  {"End", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_49End, METH_NOARGS, __pyx_doc_9tesserocr_13PyTessBaseAPI_48End},
  {"__enter__", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_51__enter__, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_9tesserocr_13PyTessBaseAPI_53__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9tesserocr_PyTessBaseAPI = {
  PyVarObject_HEAD_INIT(0, 0)
  "tesserocr.PyTessBaseAPI", /*tp_name*/
  sizeof(struct __pyx_obj_9tesserocr_PyTessBaseAPI), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9tesserocr_PyTessBaseAPI, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Cython wrapper class around the C++ TessBaseAPI class.\n\n    Usage as a context manager:\n\n    >>> with PyTessBaseAPI(path='./', lang='eng') as tesseract:\n    ...     tesseract.SetImage(image)\n    ...     text = tesseract.GetUTF8Text()\n\n    Example with manual handling:\n\n    >>> tesseract = PyTessBaseAPI(path='./', lang='eng')\n    >>> try:\n    ...     tesseract.SetImage(image)\n    ...     text = tesseract.GetUTF8Text()\n    ... finally:\n    ...     tesseract.End()\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9tesserocr_PyTessBaseAPI, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9tesserocr_PyTessBaseAPI, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "tesserocr",
    __pyx_k_Python_wrapper_around_the_Tesser, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1_2_1rc2, __pyx_k_1_2_1rc2, sizeof(__pyx_k_1_2_1rc2), 0, 0, 1, 0},
  {&__pyx_n_s_AUTO, __pyx_k_AUTO, sizeof(__pyx_k_AUTO), 0, 0, 1, 1},
  {&__pyx_n_s_AUTO_ONLY, __pyx_k_AUTO_ONLY, sizeof(__pyx_k_AUTO_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_AUTO_OSD, __pyx_k_AUTO_OSD, sizeof(__pyx_k_AUTO_OSD), 0, 0, 1, 1},
  {&__pyx_n_s_BMP, __pyx_k_BMP, sizeof(__pyx_k_BMP), 0, 0, 1, 1},
  {&__pyx_n_s_CIRCLE_WORD, __pyx_k_CIRCLE_WORD, sizeof(__pyx_k_CIRCLE_WORD), 0, 0, 1, 1},
  {&__pyx_n_s_COUNT, __pyx_k_COUNT, sizeof(__pyx_k_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_ClearPersistentCache, __pyx_k_ClearPersistentCache, sizeof(__pyx_k_ClearPersistentCache), 0, 0, 1, 1},
  {&__pyx_kp_s_Error_reading_image, __pyx_k_Error_reading_image, sizeof(__pyx_k_Error_reading_image), 0, 0, 1, 0},
  {&__pyx_kp_s_Failed_recognize_picture, __pyx_k_Failed_recognize_picture, sizeof(__pyx_k_Failed_recognize_picture), 0, 0, 1, 0},
  {&__pyx_kp_s_Failed_to_initialize_api, __pyx_k_Failed_to_initialize_api, sizeof(__pyx_k_Failed_to_initialize_api), 0, 0, 1, 0},
  {&__pyx_kp_s_Failed_to_read_picture, __pyx_k_Failed_to_read_picture, sizeof(__pyx_k_Failed_to_read_picture), 0, 0, 1, 0},
  {&__pyx_kp_s_Failed_to_recognize_No_image_set, __pyx_k_Failed_to_recognize_No_image_set, sizeof(__pyx_k_Failed_to_recognize_No_image_set), 0, 0, 1, 0},
  {&__pyx_n_s_Image, __pyx_k_Image, sizeof(__pyx_k_Image), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_OSD_ONLY, __pyx_k_OSD_ONLY, sizeof(__pyx_k_OSD_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_PIL, __pyx_k_PIL, sizeof(__pyx_k_PIL), 0, 0, 1, 1},
  {&__pyx_n_s_RAW_LINE, __pyx_k_RAW_LINE, sizeof(__pyx_k_RAW_LINE), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE_BLOCK, __pyx_k_SINGLE_BLOCK, sizeof(__pyx_k_SINGLE_BLOCK), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE_BLOCK_VERT_TEXT, __pyx_k_SINGLE_BLOCK_VERT_TEXT, sizeof(__pyx_k_SINGLE_BLOCK_VERT_TEXT), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE_CHAR, __pyx_k_SINGLE_CHAR, sizeof(__pyx_k_SINGLE_CHAR), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE_COLUMN, __pyx_k_SINGLE_COLUMN, sizeof(__pyx_k_SINGLE_COLUMN), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE_LINE, __pyx_k_SINGLE_LINE, sizeof(__pyx_k_SINGLE_LINE), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE_WORD, __pyx_k_SINGLE_WORD, sizeof(__pyx_k_SINGLE_WORD), 0, 0, 1, 1},
  {&__pyx_n_s_SPARSE_TEXT, __pyx_k_SPARSE_TEXT, sizeof(__pyx_k_SPARSE_TEXT), 0, 0, 1, 1},
  {&__pyx_n_s_SPARSE_TEXT_OSD, __pyx_k_SPARSE_TEXT_OSD, sizeof(__pyx_k_SPARSE_TEXT_OSD), 0, 0, 1, 1},
  {&__pyx_n_s_StringIO, __pyx_k_StringIO, sizeof(__pyx_k_StringIO), 0, 0, 1, 1},
  {&__pyx_n_s_Version, __pyx_k_Version, sizeof(__pyx_k_Version), 0, 0, 1, 1},
  {&__pyx_n_s_abspath, __pyx_k_abspath, sizeof(__pyx_k_abspath), 0, 0, 1, 1},
  {&__pyx_n_s_baseapi, __pyx_k_baseapi, sizeof(__pyx_k_baseapi), 0, 0, 1, 1},
  {&__pyx_n_s_buff, __pyx_k_buff, sizeof(__pyx_k_buff), 0, 0, 1, 1},
  {&__pyx_n_s_cStringIO, __pyx_k_cStringIO, sizeof(__pyx_k_cStringIO), 0, 0, 1, 1},
  {&__pyx_n_s_closing, __pyx_k_closing, sizeof(__pyx_k_closing), 0, 0, 1, 1},
  {&__pyx_n_s_contextlib, __pyx_k_contextlib, sizeof(__pyx_k_contextlib), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tp, __pyx_k_exc_tp, sizeof(__pyx_k_exc_tp), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_file_to_text, __pyx_k_file_to_text, sizeof(__pyx_k_file_to_text), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_languages, __pyx_k_get_languages, sizeof(__pyx_k_get_languages), 0, 0, 1, 1},
  {&__pyx_n_s_getvalue, __pyx_k_getvalue, sizeof(__pyx_k_getvalue), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_kp_s_home_fz_workspace_tesserocr_tes, __pyx_k_home_fz_workspace_tesserocr_tes, sizeof(__pyx_k_home_fz_workspace_tesserocr_tes), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
  {&__pyx_n_s_image_to_text, __pyx_k_image_to_text, sizeof(__pyx_k_image_to_text), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_lang, __pyx_k_lang, sizeof(__pyx_k_lang), 0, 0, 1, 1},
  {&__pyx_n_s_langs, __pyx_k_langs, sizeof(__pyx_k_langs), 0, 0, 1, 1},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_lept_v, __pyx_k_lept_v, sizeof(__pyx_k_lept_v), 0, 0, 1, 1},
  {&__pyx_n_s_libs_v, __pyx_k_libs_v, sizeof(__pyx_k_libs_v), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_os_path, __pyx_k_os_path, sizeof(__pyx_k_os_path), 0, 0, 1, 1},
  {&__pyx_n_s_pardir, __pyx_k_pardir, sizeof(__pyx_k_pardir), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pix, __pyx_k_pix, sizeof(__pyx_k_pix), 0, 0, 1, 1},
  {&__pyx_n_s_psm, __pyx_k_psm, sizeof(__pyx_k_psm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw, __pyx_k_raw, sizeof(__pyx_k_raw), 0, 0, 1, 1},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_tess_v, __pyx_k_tess_v, sizeof(__pyx_k_tess_v), 0, 0, 1, 1},
  {&__pyx_kp_u_tesseract, __pyx_k_tesseract, sizeof(__pyx_k_tesseract), 0, 1, 0, 0},
  {&__pyx_n_s_tesseract_version, __pyx_k_tesseract_version, sizeof(__pyx_k_tesseract_version), 0, 0, 1, 1},
  {&__pyx_n_s_tesserocr, __pyx_k_tesserocr, sizeof(__pyx_k_tesserocr), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_top, __pyx_k_top, sizeof(__pyx_k_top), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_version_str, __pyx_k_version_str, sizeof(__pyx_k_version_str), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_word, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "tesserocr.pyx":126
 * cdef str _image_buffer(image):
 *     """Return raw bytes of a PIL Image"""
 *     with closing(StringIO()) as f:             # <<<<<<<<<<<<<<
 *         image.save(f, 'BMP')
 *         return f.getvalue()
 */
  __pyx_tuple_ = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_tuple__2 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "tesserocr.pyx":249
 *             if self._init_api(path, lang, psm) == -1:
 *                 with gil:
 *                     raise RuntimeError('Failed to initialize api')             # <<<<<<<<<<<<<<
 * 
 *     def GetInitLanguagesAsString(PyTessBaseAPI self):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_initialize_api); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "tesserocr.pyx":330
 *             if self._pix == NULL:
 *                 with gil:
 *                     raise RuntimeError('Error reading image')             # <<<<<<<<<<<<<<
 *             self._baseapi.SetImage(self._pix)
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Error_reading_image); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "tesserocr.pyx":347
 *             if self._pix == NULL:
 *                 with gil:
 *                     raise RuntimeError('Error reading image')             # <<<<<<<<<<<<<<
 *             self._baseapi.SetImage(self._pix)
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Error_reading_image); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "tesserocr.pyx":382
 *         pixDestroy(&pix)
 * 
 *         with closing(StringIO(<bytes>buff[:size])) as f:             # <<<<<<<<<<<<<<
 *             image = Image.open(f)
 *             image.load()
 */
  __pyx_tuple__12 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "tesserocr.pyx":405
 *             if text == NULL:
 *                 with gil:
 *                     raise RuntimeError('Failed to recognize. No image set?')             # <<<<<<<<<<<<<<
 *         return _strip_and_free(text)
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_recognize_No_image_set); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "tesserocr.pyx":516
 *         if pix == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')             # <<<<<<<<<<<<<<
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_read_picture); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "tesserocr.pyx":520
 *         if text == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')             # <<<<<<<<<<<<<<
 * 
 *     return _strip_and_free(text)
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Failed_recognize_picture); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "tesserocr.pyx":550
 *         if pix == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed to read picture')             # <<<<<<<<<<<<<<
 *         text = _image_to_text(pix, lang, psm, path)
 *         if text == NULL:
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_read_picture); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "tesserocr.pyx":554
 *         if text == NULL:
 *             with gil:
 *                 raise RuntimeError('Failed recognize picture')             # <<<<<<<<<<<<<<
 * 
 *     return _strip_and_free(text)
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_Failed_recognize_picture); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "tesserocr.pyx":155
 * 
 *     @staticmethod
 *     def Version():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.Version()
 * 
 */
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_fz_workspace_tesserocr_tes, __pyx_n_s_Version, 155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tesserocr.pyx":159
 * 
 *     @staticmethod
 *     def ClearPersistentCache():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 */
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_fz_workspace_tesserocr_tes, __pyx_n_s_ClearPersistentCache, 159, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tesserocr.pyx":484
 * 
 * 
 * def image_to_text(image, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                    cchar_t *path=_DEFAULT_PATH):
 *     """Recognize OCR text from an image object.
 */
  __pyx_tuple__27 = PyTuple_Pack(9, __pyx_n_s_image, __pyx_n_s_lang, __pyx_n_s_psm, __pyx_n_s_path, __pyx_n_s_pix, __pyx_n_s_buff, __pyx_n_s_size, __pyx_n_s_text, __pyx_n_s_raw); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_fz_workspace_tesserocr_tes, __pyx_n_s_image_to_text, 484, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tesserocr.pyx":525
 * 
 * 
 * def file_to_text(cchar_t *filename, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                  cchar_t *path=_DEFAULT_PATH):
 *     """Extract OCR text from an image file.
 */
  __pyx_tuple__29 = PyTuple_Pack(6, __pyx_n_s_filename, __pyx_n_s_lang, __pyx_n_s_psm, __pyx_n_s_path, __pyx_n_s_pix, __pyx_n_s_text); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_fz_workspace_tesserocr_tes, __pyx_n_s_file_to_text, 525, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tesserocr.pyx":559
 * 
 * 
 * def tesseract_version():             # <<<<<<<<<<<<<<
 *     """Return tesseract-ocr and leptonica version info"""
 *     version_str = u"tesseract {}\n {}\n  {}"
 */
  __pyx_tuple__31 = PyTuple_Pack(4, __pyx_n_s_version_str, __pyx_n_s_tess_v, __pyx_n_s_lept_v, __pyx_n_s_libs_v); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(0, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_fz_workspace_tesserocr_tes, __pyx_n_s_tesseract_version, 559, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tesserocr.pyx":568
 * 
 * 
 * def get_languages(cchar_t *path=_DEFAULT_PATH):             # <<<<<<<<<<<<<<
 *     """Return available languages in the given path.
 * 
 */
  __pyx_tuple__33 = PyTuple_Pack(5, __pyx_n_s_path, __pyx_n_s_baseapi, __pyx_n_s_v, __pyx_n_s_i, __pyx_n_s_langs); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_fz_workspace_tesserocr_tes, __pyx_n_s_get_languages, 568, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inittesserocr(void); /*proto*/
PyMODINIT_FUNC inittesserocr(void)
#else
PyMODINIT_FUNC PyInit_tesserocr(void); /*proto*/
PyMODINIT_FUNC PyInit_tesserocr(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  tesseract::TessBaseAPI __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  __pyx_t_9tesseract_cchar_t *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_tesserocr(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("tesserocr", __pyx_methods, __pyx_k_Python_wrapper_around_the_Tesser, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_tesserocr) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "tesserocr")) {
      if (unlikely(PyDict_SetItemString(modules, "tesserocr", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_9tesserocr__abs_path = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_9tesserocr__lang_s = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_9tesserocr_PSM) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9tesserocr_PSM.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PSM", (PyObject *)&__pyx_type_9tesserocr_PSM) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9tesserocr_PSM = &__pyx_type_9tesserocr_PSM;
  __pyx_vtabptr_9tesserocr_PyTessBaseAPI = &__pyx_vtable_9tesserocr_PyTessBaseAPI;
  __pyx_vtable_9tesserocr_PyTessBaseAPI._init_api = (int (*)(struct __pyx_obj_9tesserocr_PyTessBaseAPI *, __pyx_t_9tesseract_cchar_t *, __pyx_t_9tesseract_cchar_t *, enum tesseract::PageSegMode))__pyx_f_9tesserocr_13PyTessBaseAPI__init_api;
  __pyx_vtable_9tesserocr_PyTessBaseAPI._end_api = (void (*)(struct __pyx_obj_9tesserocr_PyTessBaseAPI *))__pyx_f_9tesserocr_13PyTessBaseAPI__end_api;
  __pyx_vtable_9tesserocr_PyTessBaseAPI._destroy_pix = (void (*)(struct __pyx_obj_9tesserocr_PyTessBaseAPI *))__pyx_f_9tesserocr_13PyTessBaseAPI__destroy_pix;
  if (PyType_Ready(&__pyx_type_9tesserocr_PyTessBaseAPI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9tesserocr_PyTessBaseAPI.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9tesserocr_PyTessBaseAPI.tp_dict, __pyx_vtabptr_9tesserocr_PyTessBaseAPI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PyTessBaseAPI", (PyObject *)&__pyx_type_9tesserocr_PyTessBaseAPI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9tesserocr_PyTessBaseAPI = &__pyx_type_9tesserocr_PyTessBaseAPI;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "tesserocr.pyx":21
 * """
 * 
 * __version__ = '1.2.1rc2'             # <<<<<<<<<<<<<<
 * 
 * import os
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_kp_s_1_2_1rc2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tesserocr.pyx":23
 * __version__ = '1.2.1rc2'
 * 
 * import os             # <<<<<<<<<<<<<<
 * from cStringIO import StringIO
 * from contextlib import closing
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tesserocr.pyx":24
 * 
 * import os
 * from cStringIO import StringIO             # <<<<<<<<<<<<<<
 * from contextlib import closing
 * from os.path import abspath, join
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_StringIO);
  __Pyx_GIVEREF(__pyx_n_s_StringIO);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_StringIO);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cStringIO, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_StringIO); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StringIO, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tesserocr.pyx":25
 * import os
 * from cStringIO import StringIO
 * from contextlib import closing             # <<<<<<<<<<<<<<
 * from os.path import abspath, join
 * try:
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_closing);
  __Pyx_GIVEREF(__pyx_n_s_closing);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_closing);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_contextlib, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_closing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_closing, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tesserocr.pyx":26
 * from cStringIO import StringIO
 * from contextlib import closing
 * from os.path import abspath, join             # <<<<<<<<<<<<<<
 * try:
 *     from PIL import Image
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_abspath);
  __Pyx_GIVEREF(__pyx_n_s_abspath);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_abspath);
  __Pyx_INCREF(__pyx_n_s_join);
  __Pyx_GIVEREF(__pyx_n_s_join);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_join);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_os_path, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_abspath); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_abspath, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_join, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tesserocr.pyx":27
 * from contextlib import closing
 * from os.path import abspath, join
 * try:             # <<<<<<<<<<<<<<
 *     from PIL import Image
 * except ImportError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "tesserocr.pyx":28
 * from os.path import abspath, join
 * try:
 *     from PIL import Image             # <<<<<<<<<<<<<<
 * except ImportError:
 *     # PIL.Image won't be supported
 */
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_Image);
      __Pyx_GIVEREF(__pyx_n_s_Image);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Image);
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_PIL, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Image); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_Image, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "tesserocr.pyx":27
 * from contextlib import closing
 * from os.path import abspath, join
 * try:             # <<<<<<<<<<<<<<
 *     from PIL import Image
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "tesserocr.pyx":29
 * try:
 *     from PIL import Image
 * except ImportError:             # <<<<<<<<<<<<<<
 *     # PIL.Image won't be supported
 *     pass
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      PyErr_Restore(0,0,0);
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "tesserocr.pyx":27
 * from contextlib import closing
 * from os.path import abspath, join
 * try:             # <<<<<<<<<<<<<<
 *     from PIL import Image
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L9_try_end:;
  }

  /* "tesserocr.pyx":38
 * 
 * # default paramters
 * setMsgSeverity(L_SEVERITY_NONE)  # suppress leptonica error messages             # <<<<<<<<<<<<<<
 * cdef TessBaseAPI _api = TessBaseAPI()
 * _api.SetVariable('debug_file', '/dev/null')  # suppress tesseract debug messages
 */
  setMsgSeverity(L_SEVERITY_NONE);

  /* "tesserocr.pyx":39
 * # default paramters
 * setMsgSeverity(L_SEVERITY_NONE)  # suppress leptonica error messages
 * cdef TessBaseAPI _api = TessBaseAPI()             # <<<<<<<<<<<<<<
 * _api.SetVariable('debug_file', '/dev/null')  # suppress tesseract debug messages
 * _api.Init(NULL, NULL)
 */
  try {
    __pyx_t_7 = tesseract::TessBaseAPI();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_9tesserocr__api = __pyx_t_7;

  /* "tesserocr.pyx":40
 * setMsgSeverity(L_SEVERITY_NONE)  # suppress leptonica error messages
 * cdef TessBaseAPI _api = TessBaseAPI()
 * _api.SetVariable('debug_file', '/dev/null')  # suppress tesseract debug messages             # <<<<<<<<<<<<<<
 * _api.Init(NULL, NULL)
 * cdef unicode _abs_path = abspath(join(_api.GetDatapath(), os.pardir)) + os.sep
 */
  __pyx_v_9tesserocr__api.SetVariable(__pyx_k_debug_file, __pyx_k_dev_null);

  /* "tesserocr.pyx":41
 * cdef TessBaseAPI _api = TessBaseAPI()
 * _api.SetVariable('debug_file', '/dev/null')  # suppress tesseract debug messages
 * _api.Init(NULL, NULL)             # <<<<<<<<<<<<<<
 * cdef unicode _abs_path = abspath(join(_api.GetDatapath(), os.pardir)) + os.sep
 * cdef unicode _lang_s = _api.GetInitLanguagesAsString()
 */
  __pyx_v_9tesserocr__api.Init(NULL, NULL);

  /* "tesserocr.pyx":42
 * _api.SetVariable('debug_file', '/dev/null')  # suppress tesseract debug messages
 * _api.Init(NULL, NULL)
 * cdef unicode _abs_path = abspath(join(_api.GetDatapath(), os.pardir)) + os.sep             # <<<<<<<<<<<<<<
 * cdef unicode _lang_s = _api.GetInitLanguagesAsString()
 * cdef cchar_t *_DEFAULT_PATH = _abs_path
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_abspath); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_join); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyUnicode_FromString(__pyx_v_9tesserocr__api.GetDatapath()); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_pardir); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_13 = 1;
    }
  }
  __pyx_t_14 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  if (__pyx_t_11) {
    __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11); __pyx_t_11 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_12);
  __pyx_t_10 = 0;
  __pyx_t_12 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_14, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_9); __pyx_t_9 = NULL;
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sep); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_14); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_9tesserocr__abs_path);
  __Pyx_DECREF_SET(__pyx_v_9tesserocr__abs_path, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tesserocr.pyx":43
 * _api.Init(NULL, NULL)
 * cdef unicode _abs_path = abspath(join(_api.GetDatapath(), os.pardir)) + os.sep
 * cdef unicode _lang_s = _api.GetInitLanguagesAsString()             # <<<<<<<<<<<<<<
 * cdef cchar_t *_DEFAULT_PATH = _abs_path
 * cdef cchar_t *_DEFAULT_LANG = _lang_s
 */
  __pyx_t_2 = __Pyx_PyUnicode_FromString(__pyx_v_9tesserocr__api.GetInitLanguagesAsString()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_9tesserocr__lang_s);
  __Pyx_DECREF_SET(__pyx_v_9tesserocr__lang_s, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tesserocr.pyx":44
 * cdef unicode _abs_path = abspath(join(_api.GetDatapath(), os.pardir)) + os.sep
 * cdef unicode _lang_s = _api.GetInitLanguagesAsString()
 * cdef cchar_t *_DEFAULT_PATH = _abs_path             # <<<<<<<<<<<<<<
 * cdef cchar_t *_DEFAULT_LANG = _lang_s
 * _api.End()
 */
  __pyx_t_15 = __Pyx_PyObject_AsString(__pyx_v_9tesserocr__abs_path); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_9tesserocr__DEFAULT_PATH = __pyx_t_15;

  /* "tesserocr.pyx":45
 * cdef unicode _lang_s = _api.GetInitLanguagesAsString()
 * cdef cchar_t *_DEFAULT_PATH = _abs_path
 * cdef cchar_t *_DEFAULT_LANG = _lang_s             # <<<<<<<<<<<<<<
 * _api.End()
 * TessBaseAPI.ClearPersistentCache()
 */
  __pyx_t_15 = __Pyx_PyObject_AsString(__pyx_v_9tesserocr__lang_s); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_9tesserocr__DEFAULT_LANG = __pyx_t_15;

  /* "tesserocr.pyx":46
 * cdef cchar_t *_DEFAULT_PATH = _abs_path
 * cdef cchar_t *_DEFAULT_LANG = _lang_s
 * _api.End()             # <<<<<<<<<<<<<<
 * TessBaseAPI.ClearPersistentCache()
 * 
 */
  __pyx_v_9tesserocr__api.End();

  /* "tesserocr.pyx":47
 * cdef cchar_t *_DEFAULT_LANG = _lang_s
 * _api.End()
 * TessBaseAPI.ClearPersistentCache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  tesseract::TessBaseAPI::ClearPersistentCache();

  /* "tesserocr.pyx":70
 *     """
 * 
 *     OSD_ONLY = PSM_OSD_ONLY             # <<<<<<<<<<<<<<
 *     """Orientation and script detection only."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_OSD_ONLY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_OSD_ONLY, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":73
 *     """Orientation and script detection only."""
 * 
 *     AUTO_OSD = PSM_AUTO_OSD             # <<<<<<<<<<<<<<
 *     """Automatic page segmentation with orientation and script detection. (OSD)"""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_AUTO_OSD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_AUTO_OSD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":76
 *     """Automatic page segmentation with orientation and script detection. (OSD)"""
 * 
 *     AUTO_ONLY = PSM_AUTO_ONLY             # <<<<<<<<<<<<<<
 *     """Automatic page segmentation, but no OSD, or OCR."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_AUTO_ONLY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_AUTO_ONLY, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":79
 *     """Automatic page segmentation, but no OSD, or OCR."""
 * 
 *     AUTO = PSM_AUTO             # <<<<<<<<<<<<<<
 *     """Fully automatic page segmentation, but no OSD. (tesserocr default)"""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_AUTO); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_AUTO, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":82
 *     """Fully automatic page segmentation, but no OSD. (tesserocr default)"""
 * 
 *     SINGLE_COLUMN = PSM_SINGLE_COLUMN             # <<<<<<<<<<<<<<
 *     """Assume a single column of text of variable sizes."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SINGLE_COLUMN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SINGLE_COLUMN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":85
 *     """Assume a single column of text of variable sizes."""
 * 
 *     SINGLE_BLOCK_VERT_TEXT = PSM_SINGLE_BLOCK_VERT_TEXT             # <<<<<<<<<<<<<<
 *     """Assume a single uniform block of vertically aligned text."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SINGLE_BLOCK_VERT_TEXT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SINGLE_BLOCK_VERT_TEXT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":88
 *     """Assume a single uniform block of vertically aligned text."""
 * 
 *     SINGLE_BLOCK = PSM_SINGLE_BLOCK             # <<<<<<<<<<<<<<
 *     """Assume a single uniform block of text. (Default.)"""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SINGLE_BLOCK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SINGLE_BLOCK, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":91
 *     """Assume a single uniform block of text. (Default.)"""
 * 
 *     SINGLE_LINE = PSM_SINGLE_LINE             # <<<<<<<<<<<<<<
 *     """Treat the image as a single text line."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SINGLE_LINE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SINGLE_LINE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":94
 *     """Treat the image as a single text line."""
 * 
 *     SINGLE_WORD = PSM_SINGLE_WORD             # <<<<<<<<<<<<<<
 *     """Treat the image as a single word."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SINGLE_WORD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SINGLE_WORD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":97
 *     """Treat the image as a single word."""
 * 
 *     CIRCLE_WORD = PSM_CIRCLE_WORD             # <<<<<<<<<<<<<<
 *     """Treat the image as a single word in a circle."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_CIRCLE_WORD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_CIRCLE_WORD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":100
 *     """Treat the image as a single word in a circle."""
 * 
 *     SINGLE_CHAR = PSM_SINGLE_CHAR             # <<<<<<<<<<<<<<
 *     """Treat the image as a single character."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SINGLE_CHAR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SINGLE_CHAR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":103
 *     """Treat the image as a single character."""
 * 
 *     SPARSE_TEXT = PSM_SPARSE_TEXT             # <<<<<<<<<<<<<<
 *     """Find as much text as possible in no particular order."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SPARSE_TEXT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SPARSE_TEXT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":106
 *     """Find as much text as possible in no particular order."""
 * 
 *     SPARSE_TEXT_OSD = PSM_SPARSE_TEXT_OSD             # <<<<<<<<<<<<<<
 *     """Sparse text with orientation and script det."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_SPARSE_TEXT_OSD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_SPARSE_TEXT_OSD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":109
 *     """Sparse text with orientation and script det."""
 * 
 *     RAW_LINE = PSM_RAW_LINE             # <<<<<<<<<<<<<<
 *     """Treat the image as a single text line, bypassing hacks that are Tesseract-specific."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_RAW_LINE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_RAW_LINE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":112
 *     """Treat the image as a single text line, bypassing hacks that are Tesseract-specific."""
 * 
 *     COUNT = PSM_COUNT             # <<<<<<<<<<<<<<
 *     """Number of enum entries."""
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(tesseract::PSM_COUNT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PSM->tp_dict, __pyx_n_s_COUNT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PSM);

  /* "tesserocr.pyx":155
 * 
 *     @staticmethod
 *     def Version():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.Version()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9tesserocr_13PyTessBaseAPI_1Version, NULL, __pyx_n_s_tesserocr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "tesserocr.pyx":154
 *         Pix *_pix
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def Version():
 *         return TessBaseAPI.Version()
 */
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PyTessBaseAPI->tp_dict, __pyx_n_s_Version, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PyTessBaseAPI);

  /* "tesserocr.pyx":155
 * 
 *     @staticmethod
 *     def Version():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.Version()
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9tesserocr_PyTessBaseAPI, __pyx_n_s_Version); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "tesserocr.pyx":154
 *         Pix *_pix
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def Version():
 *         return TessBaseAPI.Version()
 */
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PyTessBaseAPI->tp_dict, __pyx_n_s_Version, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PyTessBaseAPI);

  /* "tesserocr.pyx":159
 * 
 *     @staticmethod
 *     def ClearPersistentCache():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9tesserocr_13PyTessBaseAPI_3ClearPersistentCache, NULL, __pyx_n_s_tesserocr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "tesserocr.pyx":158
 *         return TessBaseAPI.Version()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def ClearPersistentCache():
 *         return TessBaseAPI.ClearPersistentCache()
 */
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PyTessBaseAPI->tp_dict, __pyx_n_s_ClearPersistentCache, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PyTessBaseAPI);

  /* "tesserocr.pyx":159
 * 
 *     @staticmethod
 *     def ClearPersistentCache():             # <<<<<<<<<<<<<<
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9tesserocr_PyTessBaseAPI, __pyx_n_s_ClearPersistentCache); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "tesserocr.pyx":158
 *         return TessBaseAPI.Version()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def ClearPersistentCache():
 *         return TessBaseAPI.ClearPersistentCache()
 */
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9tesserocr_PyTessBaseAPI->tp_dict, __pyx_n_s_ClearPersistentCache, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9tesserocr_PyTessBaseAPI);

  /* "tesserocr.pyx":162
 *         return TessBaseAPI.ClearPersistentCache()
 * 
 *     def __cinit__(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH,             # <<<<<<<<<<<<<<
 *                   cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO):
 *         with nogil:
 */
  __pyx_k__3 = __pyx_v_9tesserocr__DEFAULT_PATH;

  /* "tesserocr.pyx":163
 * 
 *     def __cinit__(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH,
 *                   cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self._pix = NULL
 */
  __pyx_k__4 = __pyx_v_9tesserocr__DEFAULT_LANG;
  __pyx_k__5 = tesseract::PSM_AUTO;

  /* "tesserocr.pyx":219
 *         return None
 * 
 *     def Init(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH, cchar_t *lang=_DEFAULT_LANG,             # <<<<<<<<<<<<<<
 *              PageSegMode psm=PSM_AUTO):
 *         """Initialize the API with the given data path, lang and psm.
 */
  __pyx_k__6 = __pyx_v_9tesserocr__DEFAULT_PATH;
  __pyx_k__7 = __pyx_v_9tesserocr__DEFAULT_LANG;

  /* "tesserocr.pyx":220
 * 
 *     def Init(PyTessBaseAPI self, cchar_t *path=_DEFAULT_PATH, cchar_t *lang=_DEFAULT_LANG,
 *              PageSegMode psm=PSM_AUTO):             # <<<<<<<<<<<<<<
 *         """Initialize the API with the given data path, lang and psm.
 * 
 */
  __pyx_k__8 = tesseract::PSM_AUTO;

  /* "tesserocr.pyx":484
 * 
 * 
 * def image_to_text(image, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                    cchar_t *path=_DEFAULT_PATH):
 *     """Recognize OCR text from an image object.
 */
  __pyx_k__14 = __pyx_v_9tesserocr__DEFAULT_LANG;
  __pyx_k__15 = tesseract::PSM_AUTO;

  /* "tesserocr.pyx":485
 * 
 * def image_to_text(image, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,
 *                    cchar_t *path=_DEFAULT_PATH):             # <<<<<<<<<<<<<<
 *     """Recognize OCR text from an image object.
 * 
 */
  __pyx_k__16 = __pyx_v_9tesserocr__DEFAULT_PATH;

  /* "tesserocr.pyx":484
 * 
 * 
 * def image_to_text(image, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                    cchar_t *path=_DEFAULT_PATH):
 *     """Recognize OCR text from an image object.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9tesserocr_1image_to_text, NULL, __pyx_n_s_tesserocr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_image_to_text, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tesserocr.pyx":525
 * 
 * 
 * def file_to_text(cchar_t *filename, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                  cchar_t *path=_DEFAULT_PATH):
 *     """Extract OCR text from an image file.
 */
  __pyx_k__19 = __pyx_v_9tesserocr__DEFAULT_LANG;
  __pyx_k__20 = tesseract::PSM_AUTO;

  /* "tesserocr.pyx":526
 * 
 * def file_to_text(cchar_t *filename, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,
 *                  cchar_t *path=_DEFAULT_PATH):             # <<<<<<<<<<<<<<
 *     """Extract OCR text from an image file.
 * 
 */
  __pyx_k__21 = __pyx_v_9tesserocr__DEFAULT_PATH;

  /* "tesserocr.pyx":525
 * 
 * 
 * def file_to_text(cchar_t *filename, cchar_t *lang=_DEFAULT_LANG, PageSegMode psm=PSM_AUTO,             # <<<<<<<<<<<<<<
 *                  cchar_t *path=_DEFAULT_PATH):
 *     """Extract OCR text from an image file.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9tesserocr_3file_to_text, NULL, __pyx_n_s_tesserocr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_file_to_text, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tesserocr.pyx":559
 * 
 * 
 * def tesseract_version():             # <<<<<<<<<<<<<<
 *     """Return tesseract-ocr and leptonica version info"""
 *     version_str = u"tesseract {}\n {}\n  {}"
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9tesserocr_5tesseract_version, NULL, __pyx_n_s_tesserocr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tesseract_version, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tesserocr.pyx":568
 * 
 * 
 * def get_languages(cchar_t *path=_DEFAULT_PATH):             # <<<<<<<<<<<<<<
 *     """Return available languages in the given path.
 * 
 */
  __pyx_k__24 = __pyx_v_9tesserocr__DEFAULT_PATH;
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9tesserocr_7get_languages, NULL, __pyx_n_s_tesserocr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_languages, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tesserocr.pyx":1
 * #!python             # <<<<<<<<<<<<<<
 * #cython: c_string_type=unicode, c_string_encoding=utf-8
 * """Python wrapper around the Tesseract-OCR 3.02+ C++ API
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init tesserocr", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init tesserocr");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__tesseract_3a__3a_PageSegMode(enum tesseract::PageSegMode value) {
    const enum tesseract::PageSegMode neg_one = (enum tesseract::PageSegMode) -1, const_zero = (enum tesseract::PageSegMode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum tesseract::PageSegMode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum tesseract::PageSegMode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum tesseract::PageSegMode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum tesseract::PageSegMode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum tesseract::PageSegMode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum tesseract::PageSegMode),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE enum tesseract::PageSegMode __Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(PyObject *x) {
    const enum tesseract::PageSegMode neg_one = (enum tesseract::PageSegMode) -1, const_zero = (enum tesseract::PageSegMode) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum tesseract::PageSegMode) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum tesseract::PageSegMode) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum tesseract::PageSegMode) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum tesseract::PageSegMode) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) >= 2 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) (((((enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum tesseract::PageSegMode) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) >= 3 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) (((((((enum tesseract::PageSegMode)digits[2]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum tesseract::PageSegMode) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) >= 4 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) (((((((((enum tesseract::PageSegMode)digits[3]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[2]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum tesseract::PageSegMode) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum tesseract::PageSegMode) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum tesseract::PageSegMode, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(enum tesseract::PageSegMode) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum tesseract::PageSegMode, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum tesseract::PageSegMode) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 2 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) (((enum tesseract::PageSegMode)-1)*(((((enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum tesseract::PageSegMode) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 2 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) ((((((enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 3 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) (((enum tesseract::PageSegMode)-1)*(((((((enum tesseract::PageSegMode)digits[2]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum tesseract::PageSegMode) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 3 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) ((((((((enum tesseract::PageSegMode)digits[2]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 4 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) (((enum tesseract::PageSegMode)-1)*(((((((((enum tesseract::PageSegMode)digits[3]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[2]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum tesseract::PageSegMode) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum tesseract::PageSegMode, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum tesseract::PageSegMode) - 1 > 4 * PyLong_SHIFT) {
                            return (enum tesseract::PageSegMode) ((((((((((enum tesseract::PageSegMode)digits[3]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[2]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[1]) << PyLong_SHIFT) | (enum tesseract::PageSegMode)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum tesseract::PageSegMode) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum tesseract::PageSegMode, long, PyLong_AsLong(x))
            } else if (sizeof(enum tesseract::PageSegMode) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum tesseract::PageSegMode, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum tesseract::PageSegMode val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum tesseract::PageSegMode) -1;
        }
    } else {
        enum tesseract::PageSegMode val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (enum tesseract::PageSegMode) -1;
        val = __Pyx_PyInt_As_enum__tesseract_3a__3a_PageSegMode(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum tesseract::PageSegMode");
    return (enum tesseract::PageSegMode) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum tesseract::PageSegMode");
    return (enum tesseract::PageSegMode) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
